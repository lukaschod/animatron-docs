{
  "api/ProjectDawn.Animation.AnimationIndex.html": {
    "href": "api/ProjectDawn.Animation.AnimationIndex.html",
    "title": "Struct AnimationIndex",
    "keywords": "Struct AnimationIndex Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [Serializable] public struct AnimationIndex Properties | Improve this Doc View Source Default Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public static AnimationIndex Default { get; } Property Value Type Description AnimationIndex | Improve this Doc View Source Value Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public int Value { get; } Property Value Type Description int Methods | Improve this Doc View Source Equals(AnimationIndex) Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public bool Equals(AnimationIndex other) Parameters Type Name Description AnimationIndex other Returns Type Description bool | Improve this Doc View Source Equals(object) Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source FromIndex(int) Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public static AnimationIndex FromIndex(int index) Parameters Type Name Description int index Returns Type Description AnimationIndex | Improve this Doc View Source GetHashCode() Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(AnimationIndex, AnimationIndex) Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public static bool operator ==(AnimationIndex lhs, AnimationIndex rhs) Parameters Type Name Description AnimationIndex lhs AnimationIndex rhs Returns Type Description bool | Improve this Doc View Source operator !=(AnimationIndex, AnimationIndex) Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Declaration public static bool operator !=(AnimationIndex lhs, AnimationIndex rhs) Parameters Type Name Description AnimationIndex lhs AnimationIndex rhs Returns Type Description bool"
  },
  "api/ProjectDawn.Animation.Animatron.html": {
    "href": "api/ProjectDawn.Animation.Animatron.html",
    "title": "Struct Animatron",
    "keywords": "Struct Animatron Controls animation playing. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Animatron : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source AnimationIndex Index of the animation to be played. Declaration public AnimationIndex AnimationIndex Field Value Type Description AnimationIndex | Improve this Doc View Source SamplingMode Controls pose sample interpolation mode. Declaration public SamplingMode SamplingMode Field Value Type Description SamplingMode | Improve this Doc View Source Speed Animation playback speed factor. Acts as a multiplier for time progression. Declaration public float Speed Field Value Type Description float | Improve this Doc View Source Time Total time passed since the last Play(AnimationIndex) call. Declaration public float Time Field Value Type Description float Properties | Improve this Doc View Source Default Controls animation playing. Declaration public static Animatron Default { get; } Property Value Type Description Animatron Methods | Improve this Doc View Source Play(AnimationIndex) Play animation at given index. Declaration public void Play(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.AnimatronAuthoring.Player.html": {
    "href": "api/ProjectDawn.Animation.AnimatronAuthoring.Player.html",
    "title": "Struct AnimatronAuthoring.Player",
    "keywords": "Struct AnimatronAuthoring.Player Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [Serializable] public struct AnimatronAuthoring.Player Fields | Improve this Doc View Source Enabled Controls whether the default player should be added. Declaration [Tooltip(\"Controls whether the default player should be added.\")] public bool Enabled Field Value Type Description bool | Improve this Doc View Source SamplingMode Controls the pose sample interpolation mode. Declaration [Tooltip(\"Controls the pose sample interpolation mode.\")] public SamplingMode SamplingMode Field Value Type Description SamplingMode | Improve this Doc View Source Speed Animation playback speed factor. Acts as a multiplier for time progression. Declaration [Tooltip(\"Animation playback speed factor. Acts as a multiplier for time progression.\")] public float Speed Field Value Type Description float Properties | Improve this Doc View Source Default Declaration public static AnimatronAuthoring.Player Default { get; } Property Value Type Description AnimatronAuthoring.Player"
  },
  "api/ProjectDawn.Animation.AnimatronAuthoring.Skin.html": {
    "href": "api/ProjectDawn.Animation.AnimatronAuthoring.Skin.html",
    "title": "Struct AnimatronAuthoring.Skin",
    "keywords": "Struct AnimatronAuthoring.Skin Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [Serializable] public struct AnimatronAuthoring.Skin Fields | Improve this Doc View Source BindingIndex Index at which the renderer was assigned in Rig. Declaration [Tooltip(\"Index at which the renderer was assigned in Rig.\")] public int BindingIndex Field Value Type Description int | Improve this Doc View Source GameObject GameObject that contains the rendering component. Declaration [Tooltip(\"GameObject that contains the rendering component.\")] public GameObject GameObject Field Value Type Description GameObject"
  },
  "api/ProjectDawn.Animation.AnimatronAuthoring.html": {
    "href": "api/ProjectDawn.Animation.AnimatronAuthoring.html",
    "title": "Class AnimatronAuthoring",
    "keywords": "Class AnimatronAuthoring Animatron is the main component of the package responsible for animating an object. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour AnimatronAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.World EntityBehaviour.IsCreated EntityBehaviour.GetOrCreateEntity() EntityBehaviour.OnEnable() EntityBehaviour.OnDisable() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Miscellaneous/Animatron\")] [HelpURL(\"https://lukaschod.github.io/animatron-docs/manual/authoring/animatron.html\")] public class AnimatronAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_CullingMode Animatron is the main component of the package responsible for animating an object. Declaration [SerializeField] protected CullingMode m_CullingMode Field Value Type Description CullingMode | Improve this Doc View Source m_Player Animatron is the main component of the package responsible for animating an object. Declaration [SerializeField] protected AnimatronAuthoring.Player m_Player Field Value Type Description AnimatronAuthoring.Player | Improve this Doc View Source m_Rig Animatron is the main component of the package responsible for animating an object. Declaration [SerializeField] protected Rig m_Rig Field Value Type Description Rig | Improve this Doc View Source m_Skins Animatron is the main component of the package responsible for animating an object. Declaration [SerializeField] protected AnimatronAuthoring.Skin[] m_Skins Field Value Type Description Skin[] Properties | Improve this Doc View Source EntityAnimatron Returns Animatron component that is connected to this game object. Declaration public ref Animatron EntityAnimatron { get; } Property Value Type Description Animatron | Improve this Doc View Source EntityPose Returns JointPose buffer that is connected to this game object. The current pose of this game object. Declaration public DynamicBuffer<JointPose> EntityPose { get; } Property Value Type Description DynamicBuffer<JointPose> | Improve this Doc View Source IsPlaying Returns true, if any animation is currently played. Declaration public bool IsPlaying { get; } Property Value Type Description bool | Improve this Doc View Source Rig Animatron is the main component of the package responsible for animating an object. Declaration public Rig Rig { get; set; } Property Value Type Description Rig | Improve this Doc View Source Skins Animatron is the main component of the package responsible for animating an object. Declaration public AnimatronAuthoring.Skin[] Skins { get; set; } Property Value Type Description Skin[] | Improve this Doc View Source Speed Animation play speed. Declaration public float Speed { get; set; } Property Value Type Description float | Improve this Doc View Source Time Total time passed since the last Play(AnimationIndex). Declaration public float Time { get; set; } Property Value Type Description float Methods | Improve this Doc View Source FindAnimationIndex(string) Returns animation index with given name. Declaration public AnimationIndex FindAnimationIndex(string name) Parameters Type Name Description string name Returns Type Description AnimationIndex Exceptions Type Condition Exception | Improve this Doc View Source FindJointIndex(string) Returns joint index with given name. Declaration public int FindJointIndex(string name) Parameters Type Name Description string name Returns Type Description int Exceptions Type Condition Exception | Improve this Doc View Source GetJointWorldTransform(int) Returns the joint's rigid transform in world space. This is quite useful for attachments. Declaration public RigidTransform GetJointWorldTransform(int jointIndex) Parameters Type Name Description int jointIndex Returns Type Description RigidTransform | Improve this Doc View Source Play(AnimationIndex) Play animation at given index. Declaration public void Play(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex | Improve this Doc View Source TryFindAnimationIndex(string, out AnimationIndex) Returns animation index with given name. Declaration public bool TryFindAnimationIndex(string name, out AnimationIndex index) Parameters Type Name Description string name AnimationIndex index Returns Type Description bool Exceptions Type Condition Exception | Improve this Doc View Source TryFindJointIndex(string, out int) Returns joint index with given name. Declaration public bool TryFindJointIndex(string name, out int index) Parameters Type Name Description string name int index Returns Type Description bool Exceptions Type Condition Exception"
  },
  "api/ProjectDawn.Animation.AnimatronSystem.html": {
    "href": "api/ProjectDawn.Animation.AnimatronSystem.html",
    "title": "Struct AnimatronSystem",
    "keywords": "Struct AnimatronSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateBefore(typeof(PoseSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct AnimatronSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.AnimatronSystemGroup.html": {
    "href": "api/ProjectDawn.Animation.AnimatronSystemGroup.html",
    "title": "Class AnimatronSystemGroup",
    "keywords": "Class AnimatronSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AnimatronSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public class AnimatronSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Animation.Armature.html": {
    "href": "api/ProjectDawn.Animation.Armature.html",
    "title": "Struct Armature",
    "keywords": "Struct Armature Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Armature Fields | Improve this Doc View Source JointNames Names of joints. This can be empty, if rig is baked without the option. Declaration public BlobArray<FixedString64Bytes> JointNames Field Value Type Description BlobArray<FixedString64Bytes> | Improve this Doc View Source JointParentIndices Each joint index to parent. Declaration public BlobArray<int> JointParentIndices Field Value Type Description BlobArray<int> | Improve this Doc View Source SkinBindPoses Flattened array of all skins bind poses. Bind pose is matrix that transforms from object to bone space (a.k.a. parent space of that bone). Use GetSkinBindPoses(Skin) to get bind poses of particular skin. Declaration public BlobArray<float4x4> SkinBindPoses Field Value Type Description BlobArray<float4x4> | Improve this Doc View Source SkinJointIndices Flattened array of all kins indices to joints. Use GetSkinJointIndices(Skin) to get skin joint indices of particular skin. Declaration public BlobArray<int> SkinJointIndices Field Value Type Description BlobArray<int> | Improve this Doc View Source Skins Skin is subset of armature joints. Declaration public BlobArray<Skin> Skins Field Value Type Description BlobArray<Skin> Properties | Improve this Doc View Source JointCount Total number of joints in the armature. Declaration public int JointCount { get; } Property Value Type Description int Methods | Improve this Doc View Source FindJointIndex(string) Finds the index of a joint by name. Throws if not found. Declaration public int FindJointIndex(string name) Parameters Type Name Description string name Returns Type Description int | Improve this Doc View Source FindJointIndex(in FixedString64Bytes) Finds the index of a joint by name. Throws if not found. Declaration public int FindJointIndex(in FixedString64Bytes name) Parameters Type Name Description FixedString64Bytes name Returns Type Description int | Improve this Doc View Source GetSkinBindPoses(Skin) Returns a read-only span of bind pose matrices for the given skin. Declaration public ReadOnlySpan<float4x4> GetSkinBindPoses(Skin skin) Parameters Type Name Description Skin skin Returns Type Description ReadOnlySpan<float4x4> | Improve this Doc View Source GetSkinJointIndices(Skin) Returns a read-only span of joint indices for the given skin. Declaration public ReadOnlySpan<int> GetSkinJointIndices(Skin skin) Parameters Type Name Description Skin skin Returns Type Description ReadOnlySpan<int> | Improve this Doc View Source TryFindJointIndex(string, out int) Tries to find the index of a joint by name. Declaration public bool TryFindJointIndex(string name, out int index) Parameters Type Name Description string name int index Returns Type Description bool | Improve this Doc View Source TryFindJointIndex(in FixedString64Bytes, out int) Tries to find the index of a joint by name. Declaration public bool TryFindJointIndex(in FixedString64Bytes name, out int index) Parameters Type Name Description FixedString64Bytes name int index Returns Type Description bool"
  },
  "api/ProjectDawn.Animation.ArmatureRef.html": {
    "href": "api/ProjectDawn.Animation.ArmatureRef.html",
    "title": "Struct ArmatureRef",
    "keywords": "Struct ArmatureRef Used for assigning Armature as component for entity. Implements ISharedComponentData IQueryTypeParameter IEquatable<ArmatureRef> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct ArmatureRef : ISharedComponentData, IQueryTypeParameter, IEquatable<ArmatureRef> Fields | Improve this Doc View Source Value Used for assigning Armature as component for entity. Declaration public BlobAssetReference<Armature> Value Field Value Type Description BlobAssetReference<Armature> Methods | Improve this Doc View Source Dispose() Used for assigning Armature as component for entity. Declaration public void Dispose() | Improve this Doc View Source Equals(ArmatureRef) Used for assigning Armature as component for entity. Declaration public bool Equals(ArmatureRef other) Parameters Type Name Description ArmatureRef other Returns Type Description bool | Improve this Doc View Source GetHashCode() Used for assigning Armature as component for entity. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Animation.BaseColorProperty.html": {
    "href": "api/ProjectDawn.Animation.BaseColorProperty.html",
    "title": "Struct BaseColorProperty",
    "keywords": "Struct BaseColorProperty Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [MaterialProperty(\"_BaseColor\", -1)] public struct BaseColorProperty : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Declaration public Color Value Field Value Type Description Color Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.CrossFader.html": {
    "href": "api/ProjectDawn.Animation.CrossFader.html",
    "title": "Struct CrossFader",
    "keywords": "Struct CrossFader Controls Animatron animation cross fading. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct CrossFader : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source AnimationIndex Previous track animation index. Declaration public AnimationIndex AnimationIndex Field Value Type Description AnimationIndex | Improve this Doc View Source Blend Blending of previous and current track. Ranges from Duration to 0. Declaration public float Blend Field Value Type Description float | Improve this Doc View Source Duration Total duration of the transition effect. Must be greater than 0. Declaration public float Duration Field Value Type Description float | Improve this Doc View Source InTransition Indicates whether a transition is currently in progress. Declaration public bool InTransition Field Value Type Description bool | Improve this Doc View Source RequestedAnimationIndex The animation requested to be played using the internalizer. Declaration public AnimationIndex RequestedAnimationIndex Field Value Type Description AnimationIndex | Improve this Doc View Source Time Previous track play time. Declaration public float Time Field Value Type Description float Properties | Improve this Doc View Source Default Controls Animatron animation cross fading. Declaration public static CrossFader Default { get; } Property Value Type Description CrossFader Methods | Improve this Doc View Source CheckValidity() Controls Animatron animation cross fading. Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public void CheckValidity() | Improve this Doc View Source CrossFade(AnimationIndex) Crossfades into a new animation using a blending transition. This is a deferred operation, and subsequent calls within the same frame will overwrite the previous one. Declaration public void CrossFade(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.CrossFaderAuthoring.html": {
    "href": "api/ProjectDawn.Animation.CrossFaderAuthoring.html",
    "title": "Class CrossFaderAuthoring",
    "keywords": "Class CrossFaderAuthoring Handles simple crossfading between animations by linearly blending weights over time. This component provides a basic solution for transitioning between animations, but for smoother and more physically convincing results, it's recommended to use Inertializer instead. Inertialization better preserves motion momentum and reduces visual popping during abrupt changes. Inheritance object Object Component Behaviour MonoBehaviour CrossFaderAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [AddComponentMenu(\"Miscellaneous/Cross Fader\")] [HelpURL(\"https://lukaschod.github.io/animatron-docs/manual/authoring/cross-fader.html\")] public class CrossFaderAuthoring : MonoBehaviour Properties | Improve this Doc View Source Duration Time in seconds for the transition from the previous animation. Declaration public float Duration { get; set; } Property Value Type Description float | Improve this Doc View Source EntityCrossFader Handles simple crossfading between animations by linearly blending weights over time. This component provides a basic solution for transitioning between animations, but for smoother and more physically convincing results, it's recommended to use Inertializer instead. Inertialization better preserves motion momentum and reduces visual popping during abrupt changes. Declaration public ref CrossFader EntityCrossFader { get; } Property Value Type Description CrossFader Methods | Improve this Doc View Source CrossFade(AnimationIndex) Initiates a crossfade transition to the specified animation by blending weights over time. This provides a simple linear interpolation between the current and target animation. For smoother transitions that better preserve motion momentum, consider using Inertializer instead. Declaration public void CrossFade(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex"
  },
  "api/ProjectDawn.Animation.CrossFaderSystem.html": {
    "href": "api/ProjectDawn.Animation.CrossFaderSystem.html",
    "title": "Struct CrossFaderSystem",
    "keywords": "Struct CrossFaderSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateAfter(typeof(AnimatronSystem))] [UpdateBefore(typeof(PoseSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct CrossFaderSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Culled.html": {
    "href": "api/ProjectDawn.Animation.Culled.html",
    "title": "Struct Culled",
    "keywords": "Struct Culled Implements IEnableableComponent IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Culled : IEnableableComponent, IComponentData, IQueryTypeParameter Implements Unity.Entities.IEnableableComponent Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.CullingMode.html": {
    "href": "api/ProjectDawn.Animation.CullingMode.html",
    "title": "Enum CullingMode",
    "keywords": "Enum CullingMode Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public enum CullingMode Fields Name Description AlwaysAnimate CullCompletely"
  },
  "api/ProjectDawn.Animation.CullingSystem.html": {
    "href": "api/ProjectDawn.Animation.CullingSystem.html",
    "title": "Class CullingSystem",
    "keywords": "Class CullingSystem Inheritance object ComponentSystemBase SystemBase CullingSystem Inherited Members SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AnimatronSystemGroup))] public class CullingSystem : SystemBase Methods | Improve this Doc View Source OnCreate() Called when this system is created. Declaration protected override void OnCreate() Overrides Unity.Entities.ComponentSystemBase.OnCreate() Remarks Implement an OnCreate() function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ComponentSystemBase.OnStartRunning() and OnUpdate are invoked. OnCreateForCompiler() Declaration protected override void OnCreateForCompiler() Overrides Unity.Entities.ComponentSystemBase.OnCreateForCompiler() | Improve this Doc View Source OnUpdate() Implement OnUpdate() to perform the major work of this system. Declaration protected override void OnUpdate() Overrides Unity.Entities.SystemBase.OnUpdate() Remarks By default, the system invokes `OnUpdate()` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.ComponentSystemBase.RequireForUpdate<T>() or Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see [ShouldRunSystem]. The [Entities.ForEach] and [Job.WithCode] constructions provide convenient mechanisms for defining jobs. You can also instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]."
  },
  "api/ProjectDawn.Animation.Editor.AnimatronEditor.html": {
    "href": "api/ProjectDawn.Animation.Editor.AnimatronEditor.html",
    "title": "Class AnimatronEditor",
    "keywords": "Class AnimatronEditor Inheritance object Object ScriptableObject Editor AnimatronEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(AnimatronAuthoring))] public class AnimatronEditor : Editor Methods | Improve this Doc View Source CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI()"
  },
  "api/ProjectDawn.Animation.Editor.ArmatureRenderSystem.html": {
    "href": "api/ProjectDawn.Animation.Editor.ArmatureRenderSystem.html",
    "title": "Struct ArmatureRenderSystem",
    "keywords": "Struct ArmatureRenderSystem Useful for debugging the pose. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [UpdateInGroup(typeof(PresentationSystemGroup))] public struct ArmatureRenderSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Editor.CrossFaderEditor.html": {
    "href": "api/ProjectDawn.Animation.Editor.CrossFaderEditor.html",
    "title": "Class CrossFaderEditor",
    "keywords": "Class CrossFaderEditor Inheritance object Object ScriptableObject Editor CrossFaderEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(CrossFaderAuthoring))] public class CrossFaderEditor : Editor Methods | Improve this Doc View Source CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI()"
  },
  "api/ProjectDawn.Animation.Editor.InertializerEditor.html": {
    "href": "api/ProjectDawn.Animation.Editor.InertializerEditor.html",
    "title": "Class InertializerEditor",
    "keywords": "Class InertializerEditor Inheritance object Object ScriptableObject Editor InertializerEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(InertializerAuthoring))] public class InertializerEditor : Editor Methods | Improve this Doc View Source CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI()"
  },
  "api/ProjectDawn.Animation.Editor.InstanceDrawer.html": {
    "href": "api/ProjectDawn.Animation.Editor.InstanceDrawer.html",
    "title": "Class InstanceDrawer",
    "keywords": "Class InstanceDrawer Inheritance object GUIDrawer PropertyDrawer InstanceDrawer Inherited Members PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomPropertyDrawer(typeof(AnimatronAuthoring.Skin))] public class InstanceDrawer : PropertyDrawer Methods | Improve this Doc View Source CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property The SerializedProperty to make the custom GUI for. Returns Type Description VisualElement The element containing the custom GUI. Overrides UnityEditor.PropertyDrawer.CreatePropertyGUI(UnityEditor.SerializedProperty)"
  },
  "api/ProjectDawn.Animation.Editor.RenderBoundsSystem.html": {
    "href": "api/ProjectDawn.Animation.Editor.RenderBoundsSystem.html",
    "title": "Struct RenderBoundsSystem",
    "keywords": "Struct RenderBoundsSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [UpdateInGroup(typeof(PresentationSystemGroup))] public struct RenderBoundsSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Editor.RigEditor.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigEditor.html",
    "title": "Class RigEditor",
    "keywords": "Class RigEditor Inheritance object Object ScriptableObject Editor RigEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(Rig))] public class RigEditor : Editor Methods | Improve this Doc View Source OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/ProjectDawn.Animation.Editor.RigImporter.Animation.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporter.Animation.html",
    "title": "Class RigImporter.Animation",
    "keywords": "Class RigImporter.Animation Inheritance object RigImporter.Animation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [Serializable] public class RigImporter.Animation Fields | Improve this Doc View Source Clip The animation clip to bake into the rig. Declaration [Tooltip(\"Animation clip to bake into the rig.\")] public AnimationClip Clip Field Value Type Description AnimationClip | Improve this Doc View Source Name The name identifier for the animation. Declaration [Tooltip(\"The name identifier for this animation.\")] public string Name Field Value Type Description string | Improve this Doc View Source Speed The playback speed of the animation. Declaration [Tooltip(\"Playback speed of the animation.\")] public float Speed Field Value Type Description float"
  },
  "api/ProjectDawn.Animation.Editor.RigImporter.GeneratePrefabMode.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporter.GeneratePrefabMode.html",
    "title": "Enum RigImporter.GeneratePrefabMode",
    "keywords": "Enum RigImporter.GeneratePrefabMode Controls prefab generation. Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [Serializable] public enum RigImporter.GeneratePrefabMode Fields Name Description None Controls prefab generation. RenderMeshArray Controls prefab generation. SkinnedMeshRenderer Controls prefab generation."
  },
  "api/ProjectDawn.Animation.Editor.RigImporter.Joint.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporter.Joint.html",
    "title": "Class RigImporter.Joint",
    "keywords": "Class RigImporter.Joint Inheritance object RigImporter.Joint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [Serializable] public class RigImporter.Joint Fields | Improve this Doc View Source Enabled Declaration public bool Enabled Field Value Type Description bool | Improve this Doc View Source Transform Declaration public Transform Transform Field Value Type Description Transform"
  },
  "api/ProjectDawn.Animation.Editor.RigImporter.Skin.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporter.Skin.html",
    "title": "Class RigImporter.Skin",
    "keywords": "Class RigImporter.Skin Inheritance object RigImporter.Skin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [Serializable] public class RigImporter.Skin Fields | Improve this Doc View Source Enabled Declaration public bool Enabled Field Value Type Description bool | Improve this Doc View Source SkinnedMeshRenderer Declaration public SkinnedMeshRenderer SkinnedMeshRenderer Field Value Type Description SkinnedMeshRenderer"
  },
  "api/ProjectDawn.Animation.Editor.RigImporter.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporter.html",
    "title": "Class RigImporter",
    "keywords": "Class RigImporter Inheritance object Object AssetImporter ScriptedImporter RigImporter Inherited Members ScriptedImporter.SupportsRemappedAssetType(Type) AssetImporter.GetImportLog(string) AssetImporter.SetAssetBundleNameAndVariant(string, string) AssetImporter.GetAtPath(string) AssetImporter.SaveAndReimport() AssetImporter.AddRemap(AssetImporter.SourceAssetIdentifier, Object) AssetImporter.RemoveRemap(AssetImporter.SourceAssetIdentifier) AssetImporter.GetExternalObjectMap() AssetImporter.assetPath AssetImporter.importSettingsMissing AssetImporter.assetTimeStamp AssetImporter.userData AssetImporter.assetBundleName AssetImporter.assetBundleVariant Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [ScriptedImporter(6, \"rig\")] public class RigImporter : ScriptedImporter Fields | Improve this Doc View Source AnimationNames If enabled, animation names will be embedded in the rig's Motion. Declaration [Tooltip(\"Include animation names in the baked motion if enabled.\")] public bool AnimationNames Field Value Type Description bool | Improve this Doc View Source Animations A list of animations to bake into the rig's Motion. Declaration [Tooltip(\"List of animations to bake into the rig's motion.\")] public List<RigImporter.Animation> Animations Field Value Type Description List<RigImporter.Animation> | Improve this Doc View Source Force4BlendWeights If enabled, ensures all meshes use exactly 4 blend weights by regenerating those that don't. Declaration [Tooltip(\"Regenerates meshes with exactly 4 blend weights if they originally have fewer.\")] public bool Force4BlendWeights Field Value Type Description bool | Improve this Doc View Source JointNames If enabled, joint names will be embedded in the rig's Armature. Declaration [Tooltip(\"Include joint names in the baked armature if enabled.\")] public bool JointNames Field Value Type Description bool | Improve this Doc View Source Joints A list of joints to include in the rig's Armature. Declaration [Tooltip(\"Joints to bake into the rig's armature.\")] public List<RigImporter.Joint> Joints Field Value Type Description List<RigImporter.Joint> | Improve this Doc View Source Prefab The prefab from which the Rig will be generated. Declaration [Tooltip(\"The prefab used to generate the rig.\")] public GameObject Prefab Field Value Type Description GameObject | Improve this Doc View Source PrefabMode Controls prefab generation. Declaration [Tooltip(\"Controls prefab generation.\")] public RigImporter.GeneratePrefabMode PrefabMode Field Value Type Description RigImporter.GeneratePrefabMode | Improve this Doc View Source Skins A list of skins to be baked into the rig's Armature. A skin is a subset of joints used for mesh skinning. Declaration [Tooltip(\"Skins to bake into the rig. A skin is a subset of joints used for skinning meshes.\")] public List<RigImporter.Skin> Skins Field Value Type Description List<RigImporter.Skin> Methods | Improve this Doc View Source CollectBones() Declaration public void CollectBones() | Improve this Doc View Source CollectRenderers() Declaration public void CollectRenderers() | Improve this Doc View Source OnImportAsset(AssetImportContext) This method must by overriden by the derived class and is called by the Asset pipeline to import files. Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx This argument contains all the contextual information needed to process the import event and is also used by the custom importer to store the resulting Unity Asset. Overrides UnityEditor.AssetImporters.ScriptedImporter.OnImportAsset(UnityEditor.AssetImporters.AssetImportContext) | Improve this Doc View Source RequiresFlexSkinning() Declaration public bool RequiresFlexSkinning() Returns Type Description bool"
  },
  "api/ProjectDawn.Animation.Editor.RigImporterEditor.html": {
    "href": "api/ProjectDawn.Animation.Editor.RigImporterEditor.html",
    "title": "Class RigImporterEditor",
    "keywords": "Class RigImporterEditor Inheritance object Object ScriptableObject Editor AssetImporterEditor ScriptedImporterEditor RigImporterEditor Inherited Members AssetImporterEditor.InitializeExtraDataInstance(Object, int) AssetImporterEditor.DrawPreview(Rect) AssetImporterEditor.Awake() AssetImporterEditor.OnEnable() AssetImporterEditor.OnDisable() AssetImporterEditor.OnInspectorGUI() AssetImporterEditor.HasModified() AssetImporterEditor.CanApply() AssetImporterEditor.Apply() AssetImporterEditor.SaveChanges() AssetImporterEditor.ApplyAndImport() AssetImporterEditor.DiscardChanges() AssetImporterEditor.ResetValues() AssetImporterEditor.RevertButton() AssetImporterEditor.ApplyButton() AssetImporterEditor.OnApplyRevertGUI() AssetImporterEditor.ApplyRevertGUI() AssetImporterEditor.assetTargets AssetImporterEditor.assetTarget AssetImporterEditor.assetSerializedObject AssetImporterEditor.extraDataTargets AssetImporterEditor.extraDataTarget AssetImporterEditor.extraDataSerializedObject AssetImporterEditor.needsApplyRevert AssetImporterEditor.extraDataType AssetImporterEditor.useAssetDrawPreview AssetImporterEditor.showImportedObject Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(RigImporter))] public class RigImporterEditor : ScriptedImporterEditor Methods | Improve this Doc View Source CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI() | Improve this Doc View Source RebuildJointView() Declaration public void RebuildJointView() | Improve this Doc View Source RebuildSkinView() Declaration public void RebuildSkinView()"
  },
  "api/ProjectDawn.Animation.Editor.html": {
    "href": "api/ProjectDawn.Animation.Editor.html",
    "title": "Namespace ProjectDawn.Animation.Editor",
    "keywords": "Namespace ProjectDawn.Animation.Editor Classes AnimatronEditor CrossFaderEditor InertializerEditor InstanceDrawer RigEditor RigImporter RigImporter.Animation RigImporter.Joint RigImporter.Skin RigImporterEditor Structs ArmatureRenderSystem Useful for debugging the pose. RenderBoundsSystem Enums RigImporter.GeneratePrefabMode Controls prefab generation."
  },
  "api/ProjectDawn.Animation.EntitiesExt.html": {
    "href": "api/ProjectDawn.Animation.EntitiesExt.html",
    "title": "Class EntitiesExt",
    "keywords": "Class EntitiesExt Inheritance object EntitiesExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public static class EntitiesExt Methods | Improve this Doc View Source CreateEntityWithComponentManaged<T>(EntityCommandBuffer, T) Declaration public static void CreateEntityWithComponentManaged<T>(this EntityCommandBuffer ecb, T component) where T : class Parameters Type Name Description EntityCommandBuffer ecb T component Type Parameters Name Description T | Improve this Doc View Source CreateEntityWithComponentManaged<T>(EntityManager, T) Declaration public static Entity CreateEntityWithComponentManaged<T>(this EntityManager ecb, T component) where T : class, IComponentData, new() Parameters Type Name Description EntityManager ecb T component Returns Type Description Entity Type Parameters Name Description T | Improve this Doc View Source CreateEntityWithComponentObject<T>(EntityManager, T) Declaration public static T CreateEntityWithComponentObject<T>(this EntityManager ecb, T component) where T : Object Parameters Type Name Description EntityManager ecb T component Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source CreateEntityWithComponent<T>(EntityCommandBuffer, T) Declaration public static void CreateEntityWithComponent<T>(this EntityCommandBuffer ecb, T component) where T : unmanaged, IComponentData Parameters Type Name Description EntityCommandBuffer ecb T component Type Parameters Name Description T | Improve this Doc View Source CreateEntityWithComponent<T>(EntityManager, T) Declaration public static void CreateEntityWithComponent<T>(this EntityManager ecb, T component) where T : unmanaged, IComponentData Parameters Type Name Description EntityManager ecb T component Type Parameters Name Description T | Improve this Doc View Source CreateEntityWithComponent<T1, T2>(EntityCommandBuffer, T1, T2) Declaration public static void CreateEntityWithComponent<T1, T2>(this EntityCommandBuffer ecb, T1 component1, T2 component2) where T1 : unmanaged, IComponentData where T2 : unmanaged, IComponentData Parameters Type Name Description EntityCommandBuffer ecb T1 component1 T2 component2 Type Parameters Name Description T1 T2 | Improve this Doc View Source GetSingletonManaged<T>(EntityManager) Declaration public static T GetSingletonManaged<T>(this EntityManager ecb) where T : class, IComponentData, new() Parameters Type Name Description EntityManager ecb Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetSingletonObject<T>(EntityManager) Declaration public static T GetSingletonObject<T>(this EntityManager ecb) Parameters Type Name Description EntityManager ecb Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetSingleton<T>(EntityManager) Declaration public static T GetSingleton<T>(this EntityManager ecb) where T : unmanaged, IComponentData Parameters Type Name Description EntityManager ecb Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source TryGetComponentObject<T>(EntityManager, Entity, out T) Declaration public static bool TryGetComponentObject<T>(this EntityManager entityManager, Entity entity, out T obj) Parameters Type Name Description EntityManager entityManager Entity entity T obj Returns Type Description bool Type Parameters Name Description T | Improve this Doc View Source TryGetComponent<T>(EntityManager, Entity, out T) Declaration public static bool TryGetComponent<T>(this EntityManager entityManager, Entity entity, out T obj) where T : unmanaged, IComponentData Parameters Type Name Description EntityManager entityManager Entity entity T obj Returns Type Description bool Type Parameters Name Description T | Improve this Doc View Source TryGetSharedComponentManaged<T>(EntityManager, Entity, out T) Declaration public static bool TryGetSharedComponentManaged<T>(this EntityManager entityManager, Entity entity, out T obj) where T : struct, ISharedComponentData Parameters Type Name Description EntityManager entityManager Entity entity T obj Returns Type Description bool Type Parameters Name Description T"
  },
  "api/ProjectDawn.Animation.Float3Inertia.html": {
    "href": "api/ProjectDawn.Animation.Float3Inertia.html",
    "title": "Struct Float3Inertia",
    "keywords": "Struct Float3Inertia Single float3 inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Float3Inertia Fields | Improve this Doc View Source Axis Single float3 inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float3 Axis Field Value Type Description float3 | Improve this Doc View Source Magnitude Single float3 inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public InertializationCoefficientsOptimized Magnitude Field Value Type Description InertializationCoefficientsOptimized Methods | Improve this Doc View Source Create(float3, float3, float3, float, float) Pre-computes kofficients of inertia solver. Declaration public static Float3Inertia Create(float3 previous, float3 source, float3 target, float deltaTime, float duration) Parameters Type Name Description float3 previous float3 source float3 target float deltaTime float duration Returns Type Description Float3Inertia | Improve this Doc View Source Evaluate(in TimePower) Single float3 inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float3 Evaluate(in TimePower t) Parameters Type Name Description TimePower t Returns Type Description float3"
  },
  "api/ProjectDawn.Animation.Hybrid.BaseColorProperty.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.BaseColorProperty.html",
    "title": "Class BaseColorProperty",
    "keywords": "Class BaseColorProperty Inheritance object Object Component Behaviour MonoBehaviour BaseColorProperty Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax public class BaseColorProperty : MonoBehaviour Fields | Improve this Doc View Source Value Declaration public Color Value Field Value Type Description Color"
  },
  "api/ProjectDawn.Animation.Hybrid.EntityBehaviour.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.EntityBehaviour.html",
    "title": "Class EntityBehaviour",
    "keywords": "Class EntityBehaviour Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour AnimatronAuthoring RenderMeshArrayAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax public abstract class EntityBehaviour : MonoBehaviour Fields | Improve this Doc View Source m_Entity Declaration protected Entity m_Entity Field Value Type Description Entity Properties | Improve this Doc View Source IsCreated Declaration public bool IsCreated { get; } Property Value Type Description bool | Improve this Doc View Source World Declaration public World World { get; } Property Value Type Description World Methods | Improve this Doc View Source GetOrCreateEntity() Declaration public Entity GetOrCreateEntity() Returns Type Description Entity | Improve this Doc View Source OnDisable() Declaration protected void OnDisable() | Improve this Doc View Source OnEnable() Declaration protected void OnEnable()"
  },
  "api/ProjectDawn.Animation.Hybrid.ReadAnimatronTransformSystem.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.ReadAnimatronTransformSystem.html",
    "title": "Struct ReadAnimatronTransformSystem",
    "keywords": "Struct ReadAnimatronTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderLast = true)] [UpdateAfter(typeof(EndSimulationEntityCommandBufferSystem))] public struct ReadAnimatronTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Hybrid.Skin.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.Skin.html",
    "title": "Class Skin",
    "keywords": "Class Skin Inheritance object Object Component Behaviour MonoBehaviour Skin Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax public class Skin : MonoBehaviour"
  },
  "api/ProjectDawn.Animation.Hybrid.WriteAnimatronTransformSystem.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.WriteAnimatronTransformSystem.html",
    "title": "Struct WriteAnimatronTransformSystem",
    "keywords": "Struct WriteAnimatronTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] [UpdateBefore(typeof(FixedStepSimulationSystemGroup))] public struct WriteAnimatronTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Hybrid.WriteRenderMeshArrayTransformSystem.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.WriteRenderMeshArrayTransformSystem.html",
    "title": "Struct WriteRenderMeshArrayTransformSystem",
    "keywords": "Struct WriteRenderMeshArrayTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation.Hybrid Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] [UpdateBefore(typeof(FixedStepSimulationSystemGroup))] public struct WriteRenderMeshArrayTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Hybrid.html": {
    "href": "api/ProjectDawn.Animation.Hybrid.html",
    "title": "Namespace ProjectDawn.Animation.Hybrid",
    "keywords": "Namespace ProjectDawn.Animation.Hybrid Classes BaseColorProperty EntityBehaviour Skin Structs ReadAnimatronTransformSystem WriteAnimatronTransformSystem WriteRenderMeshArrayTransformSystem"
  },
  "api/ProjectDawn.Animation.InertializationCoefficients.html": {
    "href": "api/ProjectDawn.Animation.InertializationCoefficients.html",
    "title": "Struct InertializationCoefficients",
    "keywords": "Struct InertializationCoefficients Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct InertializationCoefficients Fields | Improve this Doc View Source A Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float A Field Value Type Description float | Improve this Doc View Source B Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float B Field Value Type Description float | Improve this Doc View Source C Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float C Field Value Type Description float | Improve this Doc View Source a0 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float a0 Field Value Type Description float | Improve this Doc View Source t1 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float t1 Field Value Type Description float | Improve this Doc View Source v0 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float v0 Field Value Type Description float | Improve this Doc View Source x0 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float x0 Field Value Type Description float Methods | Improve this Doc View Source Create(float, float, float) Pre-computes kofficients of inertia solver. Declaration public static InertializationCoefficients Create(float x0, float v0, float t1) Parameters Type Name Description float x0 float v0 float t1 Returns Type Description InertializationCoefficients | Improve this Doc View Source Evaluate(in TimePower) Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float Evaluate(in TimePower t) Parameters Type Name Description TimePower t Returns Type Description float"
  },
  "api/ProjectDawn.Animation.InertializationCoefficientsOptimized.html": {
    "href": "api/ProjectDawn.Animation.InertializationCoefficientsOptimized.html",
    "title": "Struct InertializationCoefficientsOptimized",
    "keywords": "Struct InertializationCoefficientsOptimized Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct InertializationCoefficientsOptimized Fields | Improve this Doc View Source DCBA Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float4 DCBA Field Value Type Description float4 | Improve this Doc View Source t1 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float t1 Field Value Type Description float | Improve this Doc View Source v0 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float v0 Field Value Type Description float | Improve this Doc View Source x0 Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float x0 Field Value Type Description float Methods | Improve this Doc View Source Create(float, float, float) Pre-computes kofficients of inertia solver. Declaration public static InertializationCoefficientsOptimized Create(float x0, float v0, float t1) Parameters Type Name Description float x0 float v0 float t1 Returns Type Description InertializationCoefficientsOptimized | Improve this Doc View Source Evaluate(in TimePower) Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float Evaluate(in TimePower t) Parameters Type Name Description TimePower t Returns Type Description float"
  },
  "api/ProjectDawn.Animation.Inertializer.html": {
    "href": "api/ProjectDawn.Animation.Inertializer.html",
    "title": "Struct Inertializer",
    "keywords": "Struct Inertializer Controls Animatron animation cross fading. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Inertializer : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Duration Total duration of the transition effect. Must be greater than 0. Declaration public float Duration Field Value Type Description float | Improve this Doc View Source InTransition Indicates whether a transition is currently in progress. Declaration public bool InTransition Field Value Type Description bool | Improve this Doc View Source RequestedAnimationIndex The animation requested to be played using the internalizer. Declaration public AnimationIndex RequestedAnimationIndex Field Value Type Description AnimationIndex | Improve this Doc View Source Time Time elapsed since the last transition. Declaration public float Time Field Value Type Description float Properties | Improve this Doc View Source Default Controls Animatron animation cross fading. Declaration public static Inertializer Default { get; } Property Value Type Description Inertializer Methods | Improve this Doc View Source CheckValidity() Controls Animatron animation cross fading. Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public void CheckValidity() | Improve this Doc View Source Intertialize(AnimationIndex) Inertializes into a new animation using a post processing transition. This is a deferred operation, and subsequent calls within the same frame will overwrite the previous one. Declaration public void Intertialize(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.InertializerAuthoring.html": {
    "href": "api/ProjectDawn.Animation.InertializerAuthoring.html",
    "title": "Class InertializerAuthoring",
    "keywords": "Class InertializerAuthoring Handles animation inertialization, enabling smooth transitions between animations by preserving motion continuity. Inspired by the technique used in Gears of War, this component reduces visual popping and harsh transitions when switching from one animation to another. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inheritance object Object Component Behaviour MonoBehaviour InertializerAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [AddComponentMenu(\"Miscellaneous/Inertializer\")] [HelpURL(\"https://lukaschod.github.io/animatron-docs/manual/authoring/inertializer.html\")] public class InertializerAuthoring : MonoBehaviour Properties | Improve this Doc View Source Duration Time in seconds for the transition from the previous animation. Declaration public float Duration { get; set; } Property Value Type Description float | Improve this Doc View Source EntityInertializer Handles animation inertialization, enabling smooth transitions between animations by preserving motion continuity. Inspired by the technique used in Gears of War, this component reduces visual popping and harsh transitions when switching from one animation to another. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public ref Inertializer EntityInertializer { get; } Property Value Type Description Inertializer Methods | Improve this Doc View Source Intertialize(AnimationIndex) Initiates inertialization to smoothly blend from the previous animation to the specified current animation. This technique, inspired by Gears of War, helps reduce visual pops or abrupt transitions by preserving motion momentum. Declaration public void Intertialize(AnimationIndex animationIndex) Parameters Type Name Description AnimationIndex animationIndex"
  },
  "api/ProjectDawn.Animation.InertializerSystem.html": {
    "href": "api/ProjectDawn.Animation.InertializerSystem.html",
    "title": "Struct InertializerSystem",
    "keywords": "Struct InertializerSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateAfter(typeof(AnimatronSystem))] [UpdateBefore(typeof(PoseSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct InertializerSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.JointInertia.html": {
    "href": "api/ProjectDawn.Animation.JointInertia.html",
    "title": "Struct JointInertia",
    "keywords": "Struct JointInertia Contains joint position and rotation inertia. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [InternalBufferCapacity(0)] public struct JointInertia : IBufferElementData Fields | Improve this Doc View Source Position Contains joint position and rotation inertia. Declaration public Float3Inertia Position Field Value Type Description Float3Inertia | Improve this Doc View Source Rotation Contains joint position and rotation inertia. Declaration public QuaternionInertia Rotation Field Value Type Description QuaternionInertia Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Animation.JointInertiaSystem.html": {
    "href": "api/ProjectDawn.Animation.JointInertiaSystem.html",
    "title": "Struct JointInertiaSystem",
    "keywords": "Struct JointInertiaSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateInGroup(typeof(InitializationSystemGroup))] public struct JointInertiaSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.JointPose.html": {
    "href": "api/ProjectDawn.Animation.JointPose.html",
    "title": "Struct JointPose",
    "keywords": "Struct JointPose Transform of joint at single pose. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [InternalBufferCapacity(0)] public struct JointPose : IBufferElementData Fields | Improve this Doc View Source Value Transform of joint at single pose. Declaration public RigidTransform Value Field Value Type Description RigidTransform Properties | Improve this Doc View Source Default Transform of joint at single pose. Declaration public static JointPose Default { get; } Property Value Type Description JointPose Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Animation.JointPreviousPose.html": {
    "href": "api/ProjectDawn.Animation.JointPreviousPose.html",
    "title": "Struct JointPreviousPose",
    "keywords": "Struct JointPreviousPose Transforms of joint at previous single pose. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [InternalBufferCapacity(0)] public struct JointPreviousPose : IBufferElementData Fields | Improve this Doc View Source Value Transforms of joint at previous single pose. Declaration public RigidTransform Value Field Value Type Description RigidTransform Properties | Improve this Doc View Source Default Transforms of joint at previous single pose. Declaration public static JointPose Default { get; } Property Value Type Description JointPose Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Animation.Motion.Animation.html": {
    "href": "api/ProjectDawn.Animation.Motion.Animation.html",
    "title": "Struct Motion.Animation",
    "keywords": "Struct Motion.Animation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Motion.Animation Fields | Improve this Doc View Source Begin Declaration public int Begin Field Value Type Description int | Improve this Doc View Source End Declaration public int End Field Value Type Description int | Improve this Doc View Source FrameRate Frame rate at which keyframes are sampled. Declaration public float FrameRate Field Value Type Description float | Improve this Doc View Source IsLooping Does animation loop. Declaration public bool IsLooping Field Value Type Description bool | Improve this Doc View Source Speed The speed of animation. The 1 is default and 0 is frozen. Declaration public float Speed Field Value Type Description float Properties | Improve this Doc View Source Length Animation frame count. Declaration public int Length { get; } Property Value Type Description int | Improve this Doc View Source Time Animation time in seconds. Declaration public float Time { get; } Property Value Type Description float"
  },
  "api/ProjectDawn.Animation.Motion.PoseTime.html": {
    "href": "api/ProjectDawn.Animation.Motion.PoseTime.html",
    "title": "Struct Motion.PoseTime",
    "keywords": "Struct Motion.PoseTime Used for sampling the pose. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Motion.PoseTime Fields | Improve this Doc View Source AnimationIndex Curren animation index. Declaration public int AnimationIndex Field Value Type Description int | Improve this Doc View Source PoseIndex Current index of the pose. Declaration public int PoseIndex Field Value Type Description int | Improve this Doc View Source Theta Fractional value between current pose index and next one. Used for blending between current pose and next pose. Declaration public float Theta Field Value Type Description float"
  },
  "api/ProjectDawn.Animation.Motion.html": {
    "href": "api/ProjectDawn.Animation.Motion.html",
    "title": "Struct Motion",
    "keywords": "Struct Motion Motion library that contains animation data. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Motion Fields | Improve this Doc View Source AnimationNames Motion library that contains animation data. Declaration public BlobArray<FixedString64Bytes> AnimationNames Field Value Type Description BlobArray<FixedString64Bytes> | Improve this Doc View Source Animations Motion library that contains animation data. Declaration public BlobArray<Motion.Animation> Animations Field Value Type Description BlobArray<Motion.Animation> | Improve this Doc View Source JointCount Number of joints. Declaration public int JointCount Field Value Type Description int | Improve this Doc View Source PoseCount Number of poses. Pose is single frame af all joints. Declaration public int PoseCount Field Value Type Description int | Improve this Doc View Source PoseStride The size of single pose. PoseStride = JointCount * sizeof(AnyTransform). Declaration public int PoseStride Field Value Type Description int | Improve this Doc View Source Transforms Flattened array of all joints transforms. Declaration public BlobArray<RigidTransform> Transforms Field Value Type Description BlobArray<RigidTransform> Methods | Improve this Doc View Source Blend(RigidTransform*, RigidTransform*, float) Linearly blends two transform arrays. Declaration public void Blend(RigidTransform* source, RigidTransform* target, float alpha) Parameters Type Name Description RigidTransform* source First array and also the result. RigidTransform* target Second array. float alpha Blend value. | Improve this Doc View Source FindAnimationIndex(in FixedString64Bytes) Returns animation index with given name. Declaration public AnimationIndex FindAnimationIndex(in FixedString64Bytes name) Parameters Type Name Description FixedString64Bytes name Returns Type Description AnimationIndex Exceptions Type Condition Exception | Improve this Doc View Source GetJointLocalToParentTransform(int, int) Motion library that contains animation data. Declaration public RigidTransform GetJointLocalToParentTransform(int jointIndex, int poseIndex) Parameters Type Name Description int jointIndex int poseIndex Returns Type Description RigidTransform | Improve this Doc View Source GetJointTransformIndex(int, int) Motion library that contains animation data. Declaration public int GetJointTransformIndex(int jointIndex, int poseIndex) Parameters Type Name Description int jointIndex int poseIndex Returns Type Description int | Improve this Doc View Source GetNormalizedTime(AnimationIndex, float) Returns animation normalized time that ranges from 0 to 1. Where 0 indicates the start of animation and 1 the end. Declaration public float GetNormalizedTime(AnimationIndex animationIndex, float time) Parameters Type Name Description AnimationIndex animationIndex float time Returns Type Description float | Improve this Doc View Source GetPoseTime(AnimationIndex, int) Returns pose time at given animation index and time. It can be used for sampling poses etc SamplePose(in PoseTime, NativeArray<RigidTransform>). Declaration public Motion.PoseTime GetPoseTime(AnimationIndex animationIndex, int frame) Parameters Type Name Description AnimationIndex animationIndex int frame Returns Type Description Motion.PoseTime | Improve this Doc View Source GetPoseTime(AnimationIndex, float) Returns pose time at given animation index and time. It can be used for sampling poses etc SamplePose(in PoseTime, NativeArray<RigidTransform>). Declaration public Motion.PoseTime GetPoseTime(AnimationIndex animationIndex, float time) Parameters Type Name Description AnimationIndex animationIndex float time Returns Type Description Motion.PoseTime | Improve this Doc View Source IsValidAnimationIndex(AnimationIndex) Returns true, if animation index is valid for this motion data. Declaration public bool IsValidAnimationIndex(AnimationIndex index) Parameters Type Name Description AnimationIndex index Returns Type Description bool | Improve this Doc View Source SamplePose(in PoseTime, SamplingMode, Span<RigidTransform>) Samples pose at given time. Declaration public void SamplePose(in Motion.PoseTime time, SamplingMode interpolation, Span<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time The time used for sampling. SamplingMode interpolation What interpolation should be used. Span<RigidTransform> result The arry of joint transforms. | Improve this Doc View Source SamplePose(in PoseTime, Span<RigidTransform>) Samples pose at given time without interpolation. Declaration public void SamplePose(in Motion.PoseTime time, Span<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time Span<RigidTransform> result | Improve this Doc View Source SamplePose(in PoseTime, NativeArray<RigidTransform>) Samples pose at given time without interpolation. Declaration public void SamplePose(in Motion.PoseTime time, NativeArray<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time NativeArray<RigidTransform> result | Improve this Doc View Source SamplePoseLinear(in PoseTime, Span<RigidTransform>) Samples pose at given time with linear interpolation. Declaration public void SamplePoseLinear(in Motion.PoseTime time, Span<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time Span<RigidTransform> result | Improve this Doc View Source SamplePoseLinear(in PoseTime, NativeArray<RigidTransform>) Samples pose at given time with linear interpolation. Declaration public void SamplePoseLinear(in Motion.PoseTime time, NativeArray<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time NativeArray<RigidTransform> result | Improve this Doc View Source SamplePoseUniformS(in PoseTime, Span<RigidTransform>) Samples pose at given time with uniform-s interpolation. Typically recommended for ogranic looking motion. Declaration public void SamplePoseUniformS(in Motion.PoseTime time, Span<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time Span<RigidTransform> result | Improve this Doc View Source SamplePoseUniformS(in PoseTime, NativeArray<RigidTransform>) Samples pose at given time with uniform-s interpolation. Typically recommended for ogranic looking motion. Declaration public void SamplePoseUniformS(in Motion.PoseTime time, NativeArray<RigidTransform> result) Parameters Type Name Description Motion.PoseTime time NativeArray<RigidTransform> result | Improve this Doc View Source TryFindAnimationIndex(in FixedString64Bytes, out AnimationIndex) Returns animation index with given name. Declaration public bool TryFindAnimationIndex(in FixedString64Bytes name, out AnimationIndex index) Parameters Type Name Description FixedString64Bytes name AnimationIndex index Returns Type Description bool Exceptions Type Condition Exception"
  },
  "api/ProjectDawn.Animation.MotionRef.html": {
    "href": "api/ProjectDawn.Animation.MotionRef.html",
    "title": "Struct MotionRef",
    "keywords": "Struct MotionRef Implements ISharedComponentData IQueryTypeParameter IEquatable<MotionRef> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct MotionRef : ISharedComponentData, IQueryTypeParameter, IEquatable<MotionRef> Fields | Improve this Doc View Source Value Declaration public BlobAssetReference<Motion> Value Field Value Type Description BlobAssetReference<Motion> Methods | Improve this Doc View Source Equals(MotionRef) Declaration public bool Equals(MotionRef other) Parameters Type Name Description MotionRef other Returns Type Description bool | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Animation.PoseSystem.html": {
    "href": "api/ProjectDawn.Animation.PoseSystem.html",
    "title": "Struct PoseSystem",
    "keywords": "Struct PoseSystem Transforms joint pose from parent space to root space. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateBefore(typeof(CullingSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct PoseSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.QuaternionInertia.html": {
    "href": "api/ProjectDawn.Animation.QuaternionInertia.html",
    "title": "Struct QuaternionInertia",
    "keywords": "Struct QuaternionInertia Single quaternion inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct QuaternionInertia Fields | Improve this Doc View Source Angle Single quaternion inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public InertializationCoefficientsOptimized Angle Field Value Type Description InertializationCoefficientsOptimized | Improve this Doc View Source Axis Single quaternion inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public float3 Axis Field Value Type Description float3 Methods | Improve this Doc View Source Create(quaternion, quaternion, quaternion, float, float) Pre-computes kofficients of inertia solver. Declaration public static QuaternionInertia Create(quaternion previous, quaternion source, quaternion target, float deltaTime, float duration) Parameters Type Name Description quaternion previous quaternion source quaternion target float deltaTime float duration Returns Type Description QuaternionInertia | Improve this Doc View Source Evaluate(in TimePower) Single quaternion inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Declaration public quaternion Evaluate(in TimePower t) Parameters Type Name Description TimePower t Returns Type Description quaternion"
  },
  "api/ProjectDawn.Animation.Rig.html": {
    "href": "api/ProjectDawn.Animation.Rig.html",
    "title": "Class Rig",
    "keywords": "Class Rig Rig contains serialized Armature and Motion. Inheritance object Object ScriptableObject Rig Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [PreferBinarySerialization] [HelpURL(\"https://lukaschod.github.io/animatron-docs/manual/authoring/rig.html\")] public class Rig : ScriptableObject Fields | Improve this Doc View Source DefaultTransformType Rig contains serialized Armature and Motion. Declaration public const RigTransformType DefaultTransformType = RigidTransform Field Value Type Description RigTransformType | Improve this Doc View Source DefaultVersion Rig contains serialized Armature and Motion. Declaration public const int DefaultVersion = 6 Field Value Type Description int Properties | Improve this Doc View Source IsCreated Returns true, if Armature and Motion is created. Declaration public bool IsCreated { get; } Property Value Type Description bool | Improve this Doc View Source TotalBytes Amount of bytes is used by Armature and Motion. Declaration public int TotalBytes { get; } Property Value Type Description int | Improve this Doc View Source TransformType Returns the transform type this rig was created with. Declaration public RigTransformType TransformType { get; } Property Value Type Description RigTransformType | Improve this Doc View Source Version Returns the version this rig was created with. Declaration public int Version { get; } Property Value Type Description int Methods | Improve this Doc View Source Clear() Rig contains serialized Armature and Motion. Declaration public void Clear() | Improve this Doc View Source GetOrCreateArmature() Rig contains serialized Armature and Motion. Declaration public BlobAssetReference<Armature> GetOrCreateArmature() Returns Type Description BlobAssetReference<Armature> | Improve this Doc View Source GetOrCreateMotion() Rig contains serialized Armature and Motion. Declaration public BlobAssetReference<Motion> GetOrCreateMotion() Returns Type Description BlobAssetReference<Motion> | Improve this Doc View Source ReadArmature() Rig contains serialized Armature and Motion. Declaration public BlobAssetReference<Armature> ReadArmature() Returns Type Description BlobAssetReference<Armature> | Improve this Doc View Source ReadMotion() Rig contains serialized Armature and Motion. Declaration public BlobAssetReference<Motion> ReadMotion() Returns Type Description BlobAssetReference<Motion> | Improve this Doc View Source WriteArmature(BlobBuilder) Rig contains serialized Armature and Motion. Declaration public void WriteArmature(BlobBuilder armature) Parameters Type Name Description BlobBuilder armature | Improve this Doc View Source WriteMotion(BlobBuilder) Rig contains serialized Armature and Motion. Declaration public void WriteMotion(BlobBuilder armature) Parameters Type Name Description BlobBuilder armature"
  },
  "api/ProjectDawn.Animation.RigTransformType.html": {
    "href": "api/ProjectDawn.Animation.RigTransformType.html",
    "title": "Enum RigTransformType",
    "keywords": "Enum RigTransformType Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public enum RigTransformType Fields Name Description AffineTransform Position as float3, Rotation and Scale as float3x3. LocalTransform Position as float3, Rotation as quaternnion and Scale as uniform scale. RigidTransform Position as float3 and Rotation as quaternion."
  },
  "api/ProjectDawn.Animation.RigidTransform.html": {
    "href": "api/ProjectDawn.Animation.RigidTransform.html",
    "title": "Struct RigidTransform",
    "keywords": "Struct RigidTransform Position, rotation of this entity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] public struct RigidTransform Fields | Improve this Doc View Source Identity The identity transform. Declaration public static readonly RigidTransform Identity Field Value Type Description RigidTransform | Improve this Doc View Source Position The position of this transform. Declaration [CreateProperty] public float3 Position Field Value Type Description float3 | Improve this Doc View Source Rotation The rotation of this transform. Declaration [CreateProperty] public quaternion Rotation Field Value Type Description quaternion Methods | Improve this Doc View Source ApplyScale(float) Scales this transform by the specified factor. Declaration public RigidTransform ApplyScale(float scale) Parameters Type Name Description float scale The scaling factor. Returns Type Description RigidTransform A new, scaled Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source Equals(in RigidTransform) Checks if a transform has equal position, rotation, and scale to another. Declaration public bool Equals(in RigidTransform other) Parameters Type Name Description RigidTransform other The TransformData to compare. Returns Type Description bool Returns true if the position, rotation, and scale are equal. | Improve this Doc View Source Forward() Gets the forward vector of unit length. Declaration public float3 Forward() Returns Type Description float3 The forward vector. | Improve this Doc View Source FromMatrix(float4x4) Returns the Transform equivalent of a float4x4 matrix. Declaration public static RigidTransform FromMatrix(float4x4 matrix) Parameters Type Name Description float4x4 matrix The orthogonal matrix to convert. Returns Type Description RigidTransform The Transform. Remarks If the input matrix contains non-uniform scale, the largest value will be used. Any shear in the input matrix will be ignored. See Also FromMatrixSafe(float4x4) | Improve this Doc View Source FromMatrixSafe(float4x4) Returns the Transform equivalent of a float4x4 matrix. Throws and exception if the matrix contains nonuniform scale or shear. Declaration public static RigidTransform FromMatrixSafe(float4x4 matrix) Parameters Type Name Description float4x4 matrix The orthogonal matrix to convert. Returns Type Description RigidTransform The Transform. Remarks If the input matrix contains non-uniform scale, this will throw an exception. If the input matrix contains shear, this will throw an exception. See Also FromMatrix(float4x4) | Improve this Doc View Source FromPosition(float, float, float) Returns a Transform initialized with the given position. Rotation will be identity. Declaration public static RigidTransform FromPosition(float x, float y, float z) Parameters Type Name Description float x The x coordinate of the position. float y The y coordinate of the position. float z The z coordinate of the position. Returns Type Description RigidTransform The Transform. | Improve this Doc View Source FromPosition(float3) Returns a Transform initialized with the given position. Rotation will be identity. Declaration public static RigidTransform FromPosition(float3 position) Parameters Type Name Description float3 position The position. Returns Type Description RigidTransform The Transform. | Improve this Doc View Source FromPositionRotation(float3, quaternion) Returns a Transform initialized with the given position and rotation. Declaration public static RigidTransform FromPositionRotation(float3 position, quaternion rotation) Parameters Type Name Description float3 position The position. quaternion rotation The rotation. Returns Type Description RigidTransform The Transform. | Improve this Doc View Source FromRotation(quaternion) Returns a Transform initialized with the given rotation. Position will be 0,0,0. Declaration public static RigidTransform FromRotation(quaternion rotation) Parameters Type Name Description quaternion rotation The rotation. Returns Type Description RigidTransform The Transform. | Improve this Doc View Source Inverse() Gets the inverse of this transform. Declaration public RigidTransform Inverse() Returns Type Description RigidTransform The inverse of the transform. Remarks This method will throw if the Scale field is zero. | Improve this Doc View Source InverseTransformDirection(float3) Transforms a direction by the inverse of this transform. Declaration public float3 InverseTransformDirection(float3 direction) Parameters Type Name Description float3 direction The direction to be transformed. Returns Type Description float3 The direction after transformation. | Improve this Doc View Source InverseTransformPoint(float3) Transforms a point by the inverse of this transform. Declaration public float3 InverseTransformPoint(float3 point) Parameters Type Name Description float3 point The point to be transformed. Returns Type Description float3 The point after transformation. Remarks Throws if the Scale field is zero. | Improve this Doc View Source InverseTransformRotation(quaternion) Transforms a rotation by the inverse of this transform. Declaration public quaternion InverseTransformRotation(quaternion rotation) Parameters Type Name Description quaternion rotation The rotation to be transformed. Returns Type Description quaternion The rotation after transformation. | Improve this Doc View Source InverseTransformTransform(in RigidTransform) Transforms a RigidTransform by the inverse of this transform. Declaration public RigidTransform InverseTransformTransform(in RigidTransform transformData) Parameters Type Name Description RigidTransform transformData The RigidTransform to be transformed. Returns Type Description RigidTransform The RigidTransform after transformation. | Improve this Doc View Source Right() Gets the right vector of unit length. Declaration public float3 Right() Returns Type Description float3 The right vector. | Improve this Doc View Source Rotate(quaternion) Rotates this Transform by the specified quaternion. Declaration public RigidTransform Rotate(quaternion rotation) Parameters Type Name Description quaternion rotation The rotation quaternion of unit length. Returns Type Description RigidTransform A new, rotated Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source RotateX(float) Rotates this Transform around the X axis. Declaration public RigidTransform RotateX(float angle) Parameters Type Name Description float angle The X rotation. Returns Type Description RigidTransform A new, rotated Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source RotateY(float) Rotates this Transform around the Y axis. Declaration public RigidTransform RotateY(float angle) Parameters Type Name Description float angle The Y rotation. Returns Type Description RigidTransform A new, rotated Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source RotateZ(float) Rotates this Transform around the Z axis. Declaration public RigidTransform RotateZ(float angle) Parameters Type Name Description float angle The Z rotation. Returns Type Description RigidTransform A new, rotated Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source ToInverseMatrix() Gets the float4x4 equivalent of the inverse of this transform. Declaration public float4x4 ToInverseMatrix() Returns Type Description float4x4 The inverse float4x4 matrix. | Improve this Doc View Source ToMatrix() Gets the float4x4 equivalent of this transform. Declaration public float4x4 ToMatrix() Returns Type Description float4x4 The float4x4 matrix. | Improve this Doc View Source ToString() Convert transformation data to a human-readable string Declaration public override string ToString() Returns Type Description string The transform value as a human-readable string Overrides ValueType.ToString() | Improve this Doc View Source TransformDirection(float3) Transforms a direction by this transform. Declaration public float3 TransformDirection(float3 direction) Parameters Type Name Description float3 direction The direction to be transformed. Returns Type Description float3 The direction after transformation. | Improve this Doc View Source TransformPoint(float3) Transforms a point by this transform. Declaration public float3 TransformPoint(float3 point) Parameters Type Name Description float3 point The point to be transformed. Returns Type Description float3 The point after transformation. | Improve this Doc View Source TransformRotation(quaternion) Transforms a rotation by this transform. Declaration public quaternion TransformRotation(quaternion rotation) Parameters Type Name Description quaternion rotation The rotation to be transformed. Returns Type Description quaternion The rotation after transformation. | Improve this Doc View Source TransformTransform(in RigidTransform) Transforms a Transform by this transform. Declaration public RigidTransform TransformTransform(in RigidTransform transformData) Parameters Type Name Description RigidTransform transformData The Transform to be transformed. Returns Type Description RigidTransform The Transform after transformation. | Improve this Doc View Source Translate(float3) Translates this transform by the specified vector. Declaration public RigidTransform Translate(float3 translation) Parameters Type Name Description float3 translation The translation vector. Returns Type Description RigidTransform A new, translated Transform. Remarks Note that this doesn't modify the original transform. Rather it returns a new one. | Improve this Doc View Source Up() Gets the up vector of unit length. Declaration public float3 Up() Returns Type Description float3 The up vector. | Improve this Doc View Source WithPosition(float, float, float) Creates a transform that is identical but with a new position value. Declaration public RigidTransform WithPosition(float x, float y, float z) Parameters Type Name Description float x The x coordinate of the new position. float y The y coordinate of the new position. float z The z coordinate of the new position. Returns Type Description RigidTransform The new transform. | Improve this Doc View Source WithPosition(float3) Gets an identical transform with a new position value. Declaration public RigidTransform WithPosition(float3 position) Parameters Type Name Description float3 position The position. Returns Type Description RigidTransform The transform. | Improve this Doc View Source WithRotation(quaternion) Gets an identical transform with a new rotation value. Declaration public RigidTransform WithRotation(quaternion rotation) Parameters Type Name Description quaternion rotation The rotation. Returns Type Description RigidTransform The transform."
  },
  "api/ProjectDawn.Animation.SamplingMode.html": {
    "href": "api/ProjectDawn.Animation.SamplingMode.html",
    "title": "Enum SamplingMode",
    "keywords": "Enum SamplingMode Controls pose sample interpolation. Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public enum SamplingMode Fields Name Description Interpolated Linear interpolation good for mechanical armatures. Nearest No interpolation at all. UniformS Uniform-S interpolation good for organic armatures."
  },
  "api/ProjectDawn.Animation.Skin.html": {
    "href": "api/ProjectDawn.Animation.Skin.html",
    "title": "Struct Skin",
    "keywords": "Struct Skin Skin is subset of armature joints. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct Skin Fields | Improve this Doc View Source Begin Begin offset in the SkinBindPoses. Declaration public int Begin Field Value Type Description int | Improve this Doc View Source Bounds Bounding box of this skin in object space. Declaration public AABB Bounds Field Value Type Description AABB | Improve this Doc View Source End End Offset in the SkinBindPoses. Declaration public int End Field Value Type Description int | Improve this Doc View Source Root Root index in JointPose. Declaration public int Root Field Value Type Description int Properties | Improve this Doc View Source Length The total amount of bindings in this skin. Declaration public int Length { get; } Property Value Type Description int"
  },
  "api/ProjectDawn.Animation.SkinBlendWeightCount.html": {
    "href": "api/ProjectDawn.Animation.SkinBlendWeightCount.html",
    "title": "Struct SkinBlendWeightCount",
    "keywords": "Struct SkinBlendWeightCount Specifies the dimension of blend wight used for skinning. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [MaterialProperty(\"_SkinBlendWeightCount\", -1)] public struct SkinBlendWeightCount : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Specifies the dimension of blend wight used for skinning. Declaration public float Value Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.SkinMatrix.html": {
    "href": "api/ProjectDawn.Animation.SkinMatrix.html",
    "title": "Struct SkinMatrix",
    "keywords": "Struct SkinMatrix Matrix buffer that contains the skinned transformations of bones in relation to the bind pose. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct SkinMatrix : IBufferElementData Remarks This data structure is used for mesh deformations. Fields | Improve this Doc View Source Value The matrix buffer of the skinned transformations. Declaration public float3x4 Value Field Value Type Description float3x4 Remarks This data structure is used for mesh deformations. Properties | Improve this Doc View Source Default Matrix buffer that contains the skinned transformations of bones in relation to the bind pose. Declaration public static SkinMatrix Default { get; } Property Value Type Description SkinMatrix Remarks This data structure is used for mesh deformations. Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Animation.SkinMatrixBuffer.html": {
    "href": "api/ProjectDawn.Animation.SkinMatrixBuffer.html",
    "title": "Class SkinMatrixBuffer",
    "keywords": "Class SkinMatrixBuffer This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Inheritance object SkinMatrixBuffer Implements IComponentData IQueryTypeParameter IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public class SkinMatrixBuffer : IComponentData, IQueryTypeParameter, IDisposable Constructors | Improve this Doc View Source SkinMatrixBuffer() This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public SkinMatrixBuffer() Fields | Improve this Doc View Source Handle This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public JobHandle Handle Field Value Type Description JobHandle | Improve this Doc View Source m_Length This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public NativeArray<int> m_Length Field Value Type Description NativeArray<int> Methods | Improve this Doc View Source Dispose() This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public void Dispose() | Improve this Doc View Source GetLenghtPtr() This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public int* GetLenghtPtr() Returns Type Description int* | Improve this Doc View Source Map(int) This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public NativeArray<float3x4> Map(int count) Parameters Type Name Description int count Returns Type Description NativeArray<float3x4> | Improve this Doc View Source ResizePassBufferIfRequired(int) This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public bool ResizePassBufferIfRequired(int requiredSize) Parameters Type Name Description int requiredSize Returns Type Description bool | Improve this Doc View Source Unmap(int) This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Declaration public void Unmap(int count) Parameters Type Name Description int count Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IDisposable"
  },
  "api/ProjectDawn.Animation.SkinMatrixBufferIndex.html": {
    "href": "api/ProjectDawn.Animation.SkinMatrixBufferIndex.html",
    "title": "Struct SkinMatrixBufferIndex",
    "keywords": "Struct SkinMatrixBufferIndex Specifies the index of the skin matrix in the SkinMatrixBuffer. The index is an offset in the GPU buffer, with a stride of Unity.Mathematics.float3x4. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [MaterialProperty(\"_SkinMatrixIndex\", -1)] public struct SkinMatrixBufferIndex : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Specifies the index of the skin matrix in the SkinMatrixBuffer. The index is an offset in the GPU buffer, with a stride of Unity.Mathematics.float3x4. Declaration public int Value Field Value Type Description int Properties | Improve this Doc View Source Invalid Specifies the index of the skin matrix in the SkinMatrixBuffer. The index is an offset in the GPU buffer, with a stride of Unity.Mathematics.float3x4. Declaration public static SkinMatrixBufferIndex Invalid { get; } Property Value Type Description SkinMatrixBufferIndex Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Animation.SkinRef.html": {
    "href": "api/ProjectDawn.Animation.SkinRef.html",
    "title": "Struct SkinRef",
    "keywords": "Struct SkinRef Used for assigning Armature as component for entity and skins index. Implements ISharedComponentData IQueryTypeParameter IEquatable<SkinRef> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct SkinRef : ISharedComponentData, IQueryTypeParameter, IEquatable<SkinRef> Fields | Improve this Doc View Source Armature Used for assigning Armature as component for entity and skins index. Declaration public BlobAssetReference<Armature> Armature Field Value Type Description BlobAssetReference<Armature> | Improve this Doc View Source SkinIndex Used for assigning Armature as component for entity and skins index. Declaration public int SkinIndex Field Value Type Description int Methods | Improve this Doc View Source Dispose() Used for assigning Armature as component for entity and skins index. Declaration public void Dispose() | Improve this Doc View Source Equals(SkinRef) Used for assigning Armature as component for entity and skins index. Declaration public bool Equals(SkinRef other) Parameters Type Name Description SkinRef other Returns Type Description bool | Improve this Doc View Source GetHashCode() Used for assigning Armature as component for entity and skins index. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Animation.SkinSystem.html": {
    "href": "api/ProjectDawn.Animation.SkinSystem.html",
    "title": "Struct SkinSystem",
    "keywords": "Struct SkinSystem Updates skin matrices from joint poses. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax [BurstCompile] [UpdateAfter(typeof(PoseSystem))] [UpdateBefore(typeof(CullingSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct SkinSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Animation.Tests.InertializationPerformanceTests.html": {
    "href": "api/ProjectDawn.Animation.Tests.InertializationPerformanceTests.html",
    "title": "Class InertializationPerformanceTests",
    "keywords": "Class InertializationPerformanceTests Inheritance object InertializationPerformanceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Tests Assembly: ProjectDawn.Animatron.Tests.dll Syntax [Category(\"Performance\")] public class InertializationPerformanceTests Methods | Improve this Doc View Source InertializationPerformanceTests_Create() Declaration [Test] [Performance] public void InertializationPerformanceTests_Create() | Improve this Doc View Source InertializationPerformanceTests_Create_Optimized() Declaration [Test] [Performance] public void InertializationPerformanceTests_Create_Optimized() | Improve this Doc View Source InertializationPerformanceTests_Eveluate() Declaration [Test] [Performance] public void InertializationPerformanceTests_Eveluate() | Improve this Doc View Source InertializationPerformanceTests_Eveluate_Optimized() Declaration [Test] [Performance] public void InertializationPerformanceTests_Eveluate_Optimized()"
  },
  "api/ProjectDawn.Animation.Tests.InertializationTests.html": {
    "href": "api/ProjectDawn.Animation.Tests.InertializationTests.html",
    "title": "Class InertializationTests",
    "keywords": "Class InertializationTests Inheritance object InertializationTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Animation.Tests Assembly: ProjectDawn.Animatron.Tests.dll Syntax public class InertializationTests Methods | Improve this Doc View Source InertializationTests_Float3Inertia_Works() Declaration [Test] public void InertializationTests_Float3Inertia_Works() | Improve this Doc View Source InertializationTests_QuaternionInertia_Works() Declaration [Test] public void InertializationTests_QuaternionInertia_Works() | Improve this Doc View Source InertializationTests_Regular_And_Optimized_Matches() Declaration [Test] public void InertializationTests_Regular_And_Optimized_Matches()"
  },
  "api/ProjectDawn.Animation.Tests.html": {
    "href": "api/ProjectDawn.Animation.Tests.html",
    "title": "Namespace ProjectDawn.Animation.Tests",
    "keywords": "Namespace ProjectDawn.Animation.Tests Classes InertializationPerformanceTests InertializationTests"
  },
  "api/ProjectDawn.Animation.TimePower.html": {
    "href": "api/ProjectDawn.Animation.TimePower.html",
    "title": "Struct TimePower",
    "keywords": "Struct TimePower Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Animation Assembly: ProjectDawn.Animatron.dll Syntax public struct TimePower Constructors | Improve this Doc View Source TimePower(float) Declaration public TimePower(float time) Parameters Type Name Description float time Fields | Improve this Doc View Source Powers Declaration public float4 Powers Field Value Type Description float4 | Improve this Doc View Source Value Declaration public float Value Field Value Type Description float"
  },
  "api/ProjectDawn.Animation.html": {
    "href": "api/ProjectDawn.Animation.html",
    "title": "Namespace ProjectDawn.Animation",
    "keywords": "Namespace ProjectDawn.Animation Classes AnimatronAuthoring Animatron is the main component of the package responsible for animating an object. AnimatronSystemGroup CrossFaderAuthoring Handles simple crossfading between animations by linearly blending weights over time. This component provides a basic solution for transitioning between animations, but for smoother and more physically convincing results, it's recommended to use Inertializer instead. Inertialization better preserves motion momentum and reduces visual popping during abrupt changes. CullingSystem EntitiesExt InertializerAuthoring Handles animation inertialization, enabling smooth transitions between animations by preserving motion continuity. Inspired by the technique used in Gears of War, this component reduces visual popping and harsh transitions when switching from one animation to another. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Rig Rig contains serialized Armature and Motion. SkinMatrixBuffer This is a singleton component that contains Animatron GPU skin matrices. The code is based on Unity.Rendering.SkinningBufferManager. Structs AnimationIndex Index of animation in Motion. Use FindAnimationIndex(in FixedString64Bytes) to create it. Animatron Controls animation playing. AnimatronAuthoring.Player AnimatronAuthoring.Skin AnimatronSystem Armature ArmatureRef Used for assigning Armature as component for entity. BaseColorProperty CrossFader Controls Animatron animation cross fading. CrossFaderSystem Culled Float3Inertia Single float3 inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. InertializationCoefficients Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. InertializationCoefficientsOptimized Single float inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. Inertializer Controls Animatron animation cross fading. InertializerSystem JointInertia Contains joint position and rotation inertia. JointInertiaSystem JointPose Transform of joint at single pose. JointPreviousPose Transforms of joint at previous single pose. Motion Motion library that contains animation data. Motion.Animation Motion.PoseTime Used for sampling the pose. MotionRef PoseSystem Transforms joint pose from parent space to root space. QuaternionInertia Single quaternion inertia data. Based on https://www.gdcvault.com/play/1025331/Inertialization-High-Performance-Animation-Transitions. RigidTransform Position, rotation of this entity Skin Skin is subset of armature joints. SkinBlendWeightCount Specifies the dimension of blend wight used for skinning. SkinMatrix Matrix buffer that contains the skinned transformations of bones in relation to the bind pose. SkinMatrixBufferIndex Specifies the index of the skin matrix in the SkinMatrixBuffer. The index is an offset in the GPU buffer, with a stride of Unity.Mathematics.float3x4. SkinRef Used for assigning Armature as component for entity and skins index. SkinSystem Updates skin matrices from joint poses. TimePower Enums CullingMode RigTransformType SamplingMode Controls pose sample interpolation."
  },
  "api/ProjectDawn.Rendering.Editor.InstanceDrawer.html": {
    "href": "api/ProjectDawn.Rendering.Editor.InstanceDrawer.html",
    "title": "Class InstanceDrawer",
    "keywords": "Class InstanceDrawer Inheritance object GUIDrawer PropertyDrawer InstanceDrawer Inherited Members PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Rendering.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomPropertyDrawer(typeof(RenderMeshArrayAuthoring.Instance))] public class InstanceDrawer : PropertyDrawer Methods | Improve this Doc View Source CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property The SerializedProperty to make the custom GUI for. Returns Type Description VisualElement The element containing the custom GUI. Overrides UnityEditor.PropertyDrawer.CreatePropertyGUI(UnityEditor.SerializedProperty)"
  },
  "api/ProjectDawn.Rendering.Editor.RenderMeshArrayEditor.html": {
    "href": "api/ProjectDawn.Rendering.Editor.RenderMeshArrayEditor.html",
    "title": "Class RenderMeshArrayEditor",
    "keywords": "Class RenderMeshArrayEditor Inheritance object Object ScriptableObject Editor RenderMeshArrayEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Rendering.Editor Assembly: ProjectDawn.Animatron.Editor.dll Syntax [CustomEditor(typeof(RenderMeshArrayAuthoring))] public class RenderMeshArrayEditor : Editor Methods | Improve this Doc View Source CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI()"
  },
  "api/ProjectDawn.Rendering.Editor.html": {
    "href": "api/ProjectDawn.Rendering.Editor.html",
    "title": "Namespace ProjectDawn.Rendering.Editor",
    "keywords": "Namespace ProjectDawn.Rendering.Editor Classes InstanceDrawer RenderMeshArrayEditor"
  },
  "api/ProjectDawn.Rendering.RenderFilterSettings.html": {
    "href": "api/ProjectDawn.Rendering.RenderFilterSettings.html",
    "title": "Struct RenderFilterSettings",
    "keywords": "Struct RenderFilterSettings Represents settings that control when to render a given entity. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Rendering Assembly: ProjectDawn.Animatron.dll Syntax [Serializable] public struct RenderFilterSettings Remarks For example, you can set the layermask of the entity and also set whether to render an entity in shadow maps or motion passes. Fields | Improve this Doc View Source MotionMode Specifies what kinds of motion vectors to generate for the entity, if any. Declaration public MotionVectorGenerationMode MotionMode Field Value Type Description MotionVectorGenerationMode Remarks This value corresponds to UnityEngine.Renderer.motionVectorGenerationMode. This value only affects render pipelines that use motion vectors. | Improve this Doc View Source ReceiveShadows Indicates whether to cast shadows onto the entity. Declaration public bool ReceiveShadows Field Value Type Description bool Remarks For entities that Unity converts from GameObjects, this value is the same as the Receive Shadows property of the source Mesh Renderer component. This value only affects Progressive Lightmappers. | Improve this Doc View Source RenderingLayerMask The rendering layer the entity is part of. Declaration public uint RenderingLayerMask Field Value Type Description uint Remarks This value corresponds to UnityEngine.Renderer.renderingLayerMask. | Improve this Doc View Source ShadowCastingMode Specifies how the entity should cast shadows. Declaration public ShadowCastingMode ShadowCastingMode Field Value Type Description ShadowCastingMode Remarks For entities that Unity converts from GameObjects, this value is the same as the Cast Shadows property of the source Mesh Renderer component. For more information, refer to ShadowCastingMode. | Improve this Doc View Source StaticShadowCaster Indicates whether the entity is a static shadow caster. Declaration public bool StaticShadowCaster Field Value Type Description bool Remarks This value is important to the BatchRenderGroup. Methods | Improve this Doc View Source ToFilterSettings(int) Represents settings that control when to render a given entity. Declaration public RenderFilterSettings ToFilterSettings(int layer) Parameters Type Name Description int layer Returns Type Description RenderFilterSettings Remarks For example, you can set the layermask of the entity and also set whether to render an entity in shadow maps or motion passes."
  },
  "api/ProjectDawn.Rendering.RenderMeshArrayAuthoring.Instance.html": {
    "href": "api/ProjectDawn.Rendering.RenderMeshArrayAuthoring.Instance.html",
    "title": "Struct RenderMeshArrayAuthoring.Instance",
    "keywords": "Struct RenderMeshArrayAuthoring.Instance Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Rendering Assembly: ProjectDawn.Animatron.dll Syntax [Serializable] public struct RenderMeshArrayAuthoring.Instance Fields | Improve this Doc View Source Material Declaration public Material Material Field Value Type Description Material | Improve this Doc View Source Mesh Declaration public Mesh Mesh Field Value Type Description Mesh | Improve this Doc View Source SubMesh Declaration public int SubMesh Field Value Type Description int"
  },
  "api/ProjectDawn.Rendering.RenderMeshArrayAuthoring.html": {
    "href": "api/ProjectDawn.Rendering.RenderMeshArrayAuthoring.html",
    "title": "Class RenderMeshArrayAuthoring",
    "keywords": "Class RenderMeshArrayAuthoring RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour RenderMeshArrayAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.World EntityBehaviour.IsCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Rendering Assembly: ProjectDawn.Animatron.dll Syntax [ExecuteAlways] [AddComponentMenu(\"Mesh/Render Mesh Array\")] [HelpURL(\"https://lukaschod.github.io/animatron-docs/manual/authoring/render-mesh-array.html\")] public class RenderMeshArrayAuthoring : EntityBehaviour Properties | Improve this Doc View Source Bounds The bounding box of the renderer in object space. Declaration public AABB Bounds { get; set; } Property Value Type Description AABB | Improve this Doc View Source Filter Filtering settings that determine when to draw the entity. Declaration public RenderFilterSettings Filter { get; } Property Value Type Description RenderFilterSettings | Improve this Doc View Source Instances RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration public RenderMeshArrayAuthoring.Instance[] Instances { get; } Property Value Type Description Instance[] | Improve this Doc View Source LightProbeUsage Determines what kinds of light probes the entity uses, if any. Declaration public LightProbeUsage LightProbeUsage { get; } Property Value Type Description LightProbeUsage Remarks This value corresponds to LightProbeUsage. Methods | Improve this Doc View Source OnDisable() RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration protected void OnDisable() | Improve this Doc View Source OnEnable() RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration protected void OnEnable() | Improve this Doc View Source RecalculateBounds() RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration public void RecalculateBounds() | Improve this Doc View Source SetInstances(Instance[]) RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration public void SetInstances(RenderMeshArrayAuthoring.Instance[] instances) Parameters Type Name Description Instance[] instances | Improve this Doc View Source SetInstances(ReadOnlySpan<UnityObjectRef<Material>>, ReadOnlySpan<UnityObjectRef<Mesh>>, ReadOnlySpan<MaterialMeshIndex>) RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration public void SetInstances(ReadOnlySpan<UnityObjectRef<Material>> materials, ReadOnlySpan<UnityObjectRef<Mesh>> meshes, ReadOnlySpan<MaterialMeshIndex> indices) Parameters Type Name Description ReadOnlySpan<UnityObjectRef<Material>> materials ReadOnlySpan<UnityObjectRef<Mesh>> meshes ReadOnlySpan<MaterialMeshIndex> indices | Improve this Doc View Source SetSettings(RenderFilterSettings) RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Declaration public void SetSettings(RenderFilterSettings filtering) Parameters Type Name Description RenderFilterSettings filtering"
  },
  "api/ProjectDawn.Rendering.html": {
    "href": "api/ProjectDawn.Rendering.html",
    "title": "Namespace ProjectDawn.Rendering",
    "keywords": "Namespace ProjectDawn.Rendering Classes RenderMeshArrayAuthoring RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. Structs RenderFilterSettings Represents settings that control when to render a given entity. RenderMeshArrayAuthoring.Instance"
  },
  "api/ProjectDawn.Sample.AnimatorPlayAnimation.html": {
    "href": "api/ProjectDawn.Sample.AnimatorPlayAnimation.html",
    "title": "Class AnimatorPlayAnimation",
    "keywords": "Class AnimatorPlayAnimation Inheritance object Object Component Behaviour MonoBehaviour AnimatorPlayAnimation Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class AnimatorPlayAnimation : MonoBehaviour Fields | Improve this Doc View Source Name Declaration public string Name Field Value Type Description string"
  },
  "api/ProjectDawn.Sample.Attachment.html": {
    "href": "api/ProjectDawn.Sample.Attachment.html",
    "title": "Class Attachment",
    "keywords": "Class Attachment Inheritance object Object Component Behaviour MonoBehaviour Attachment Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class Attachment : MonoBehaviour Fields | Improve this Doc View Source Animatron Declaration public AnimatronAuthoring Animatron Field Value Type Description AnimatronAuthoring | Improve this Doc View Source JointName Declaration public string JointName Field Value Type Description string"
  },
  "api/ProjectDawn.Sample.BlendTestSystem.html": {
    "href": "api/ProjectDawn.Sample.BlendTestSystem.html",
    "title": "Struct BlendTestSystem",
    "keywords": "Struct BlendTestSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct BlendTestSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Sample.CpuTimeTracker.html": {
    "href": "api/ProjectDawn.Sample.CpuTimeTracker.html",
    "title": "Class CpuTimeTracker",
    "keywords": "Class CpuTimeTracker Inheritance object Object Component Behaviour MonoBehaviour CpuTimeTracker Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class CpuTimeTracker : MonoBehaviour Fields | Improve this Doc View Source guiPosition Declaration public Vector2 guiPosition Field Value Type Description Vector2 | Improve this Doc View Source sampleIntervalSeconds Declaration [Header(\"Settings\")] public float sampleIntervalSeconds Field Value Type Description float"
  },
  "api/ProjectDawn.Sample.EntitySpawner.BlendTest.html": {
    "href": "api/ProjectDawn.Sample.EntitySpawner.BlendTest.html",
    "title": "Struct EntitySpawner.BlendTest",
    "keywords": "Struct EntitySpawner.BlendTest Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct EntitySpawner.BlendTest : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source AnimationIndexA Declaration public AnimationIndex AnimationIndexA Field Value Type Description AnimationIndex | Improve this Doc View Source AnimationIndexB Declaration public AnimationIndex AnimationIndexB Field Value Type Description AnimationIndex | Improve this Doc View Source Frequency Declaration public float Frequency Field Value Type Description float | Improve this Doc View Source State Declaration public int State Field Value Type Description int Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Sample.EntitySpawner.NormalTest.html": {
    "href": "api/ProjectDawn.Sample.EntitySpawner.NormalTest.html",
    "title": "Struct EntitySpawner.NormalTest",
    "keywords": "Struct EntitySpawner.NormalTest Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct EntitySpawner.NormalTest : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source AnimationIndex Declaration public AnimationIndex AnimationIndex Field Value Type Description AnimationIndex Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Sample.EntitySpawner.html": {
    "href": "api/ProjectDawn.Sample.EntitySpawner.html",
    "title": "Struct EntitySpawner",
    "keywords": "Struct EntitySpawner Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct EntitySpawner : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description int | Improve this Doc View Source Prefab Declaration public Entity Prefab Field Value Type Description Entity | Improve this Doc View Source Spacing Declaration public float Spacing Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Sample.NormalTestSystem.html": {
    "href": "api/ProjectDawn.Sample.NormalTestSystem.html",
    "title": "Struct NormalTestSystem",
    "keywords": "Struct NormalTestSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct NormalTestSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Sample.RetroAnimatron.html": {
    "href": "api/ProjectDawn.Sample.RetroAnimatron.html",
    "title": "Class RetroAnimatron",
    "keywords": "Class RetroAnimatron Inheritance object Object Component Behaviour MonoBehaviour RetroAnimatron Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class RetroAnimatron : MonoBehaviour Fields | Improve this Doc View Source DefaultAnimation Declaration public string DefaultAnimation Field Value Type Description string | Improve this Doc View Source FrameRate Declaration public int FrameRate Field Value Type Description int"
  },
  "api/ProjectDawn.Sample.RetroAnimatronPlayer.html": {
    "href": "api/ProjectDawn.Sample.RetroAnimatronPlayer.html",
    "title": "Struct RetroAnimatronPlayer",
    "keywords": "Struct RetroAnimatronPlayer Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public struct RetroAnimatronPlayer : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source AnimationIndex Declaration public AnimationIndex AnimationIndex Field Value Type Description AnimationIndex | Improve this Doc View Source FrameRate Declaration public int FrameRate Field Value Type Description int | Improve this Doc View Source Time Declaration public float Time Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Sample.RetroAnimatronSystem.html": {
    "href": "api/ProjectDawn.Sample.RetroAnimatronSystem.html",
    "title": "Struct RetroAnimatronSystem",
    "keywords": "Struct RetroAnimatronSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax [BurstCompile] [UpdateBefore(typeof(PoseSystem))] [UpdateInGroup(typeof(AnimatronSystemGroup))] public struct RetroAnimatronSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Sample.Spawner.BlendTest.html": {
    "href": "api/ProjectDawn.Sample.Spawner.BlendTest.html",
    "title": "Class Spawner.BlendTest",
    "keywords": "Class Spawner.BlendTest Inheritance object Spawner.BlendTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax [Serializable] public class Spawner.BlendTest Fields | Improve this Doc View Source AnimationNameA Declaration public string AnimationNameA Field Value Type Description string | Improve this Doc View Source AnimationNameB Declaration public string AnimationNameB Field Value Type Description string | Improve this Doc View Source Frequency Declaration public float Frequency Field Value Type Description float | Improve this Doc View Source State Declaration public int State Field Value Type Description int Properties | Improve this Doc View Source AnimationIndexA Declaration public AnimationIndex AnimationIndexA { get; set; } Property Value Type Description AnimationIndex | Improve this Doc View Source AnimationIndexB Declaration public AnimationIndex AnimationIndexB { get; set; } Property Value Type Description AnimationIndex | Improve this Doc View Source AnimationPropertyIndexA Declaration public int AnimationPropertyIndexA { get; set; } Property Value Type Description int | Improve this Doc View Source AnimationPropertyIndexB Declaration public int AnimationPropertyIndexB { get; set; } Property Value Type Description int"
  },
  "api/ProjectDawn.Sample.Spawner.NormalTest.html": {
    "href": "api/ProjectDawn.Sample.Spawner.NormalTest.html",
    "title": "Class Spawner.NormalTest",
    "keywords": "Class Spawner.NormalTest Inheritance object Spawner.NormalTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax [Serializable] public class Spawner.NormalTest Fields | Improve this Doc View Source AnimationName Declaration public string AnimationName Field Value Type Description string"
  },
  "api/ProjectDawn.Sample.Spawner.TestMode.html": {
    "href": "api/ProjectDawn.Sample.Spawner.TestMode.html",
    "title": "Enum Spawner.TestMode",
    "keywords": "Enum Spawner.TestMode Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public enum Spawner.TestMode Fields Name Description Blend Normal"
  },
  "api/ProjectDawn.Sample.Spawner.html": {
    "href": "api/ProjectDawn.Sample.Spawner.html",
    "title": "Class Spawner",
    "keywords": "Class Spawner Inheritance object Object Component Behaviour MonoBehaviour Spawner Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class Spawner : MonoBehaviour Fields | Improve this Doc View Source Blend Declaration public Spawner.BlendTest Blend Field Value Type Description Spawner.BlendTest | Improve this Doc View Source Count Declaration public int Count Field Value Type Description int | Improve this Doc View Source Mode Declaration public Spawner.TestMode Mode Field Value Type Description Spawner.TestMode | Improve this Doc View Source Normal Declaration public Spawner.NormalTest Normal Field Value Type Description Spawner.NormalTest | Improve this Doc View Source Prefab Declaration public GameObject Prefab Field Value Type Description GameObject | Improve this Doc View Source Spacing Declaration public float Spacing Field Value Type Description float"
  },
  "api/ProjectDawn.Sample.TeamShift.html": {
    "href": "api/ProjectDawn.Sample.TeamShift.html",
    "title": "Struct TeamShift",
    "keywords": "Struct TeamShift Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax [MaterialProperty(\"_TeamShift\", -1)] public struct TeamShift : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Declaration public float Value Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Sample.TeamSwitcher.html": {
    "href": "api/ProjectDawn.Sample.TeamSwitcher.html",
    "title": "Class TeamSwitcher",
    "keywords": "Class TeamSwitcher Inheritance object Object Component Behaviour MonoBehaviour TeamSwitcher Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax public class TeamSwitcher : MonoBehaviour"
  },
  "api/ProjectDawn.Sample.VisualizeBlend.html": {
    "href": "api/ProjectDawn.Sample.VisualizeBlend.html",
    "title": "Class VisualizeBlend",
    "keywords": "Class VisualizeBlend Inheritance object Object Component Behaviour MonoBehaviour VisualizeBlend Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, InstantiateParameters) Object.InstantiateAsync<T>(T, int, InstantiateParameters) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Sample Assembly: ProjectDawn.Animator.Samples.Survivor.dll Syntax [RequireComponent(typeof(AnimatronAuthoring))] public class VisualizeBlend : MonoBehaviour"
  },
  "api/ProjectDawn.Sample.html": {
    "href": "api/ProjectDawn.Sample.html",
    "title": "Namespace ProjectDawn.Sample",
    "keywords": "Namespace ProjectDawn.Sample Classes AnimatorPlayAnimation Attachment CpuTimeTracker RetroAnimatron Spawner Spawner.BlendTest Spawner.NormalTest TeamSwitcher VisualizeBlend Structs BlendTestSystem EntitySpawner EntitySpawner.BlendTest EntitySpawner.NormalTest NormalTestSystem RetroAnimatronPlayer RetroAnimatronSystem TeamShift Enums Spawner.TestMode"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the Scripting Reference!",
    "keywords": "Welcome to the Scripting Reference! Select the API to view the detail."
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.2.1] - 2025-08-07 Added inertialization unit and performance tests Fixed inertialization then anything played after it Optimized inertialization with SIMD that yield ~20% cpu cost reduction [1.2.0] - 2025-08-06 Fixed inertialization popping effect Fixed inertialization then overlapping transsition happens Small refactor of CrossFader structure Small refactor of Inertializer structure [1.1.0] - 2025-08-03 Added animation clip humanoid support Added to animator GetJointWorldTransform, TryFindJointIndex and FindJointIndex to make attachments easier Added prefab generation to inherit scales from prefab Added new scene ArcherHumanoid in TerracottaArmy Removed entities dependency from package as ecs graphics has its own Fixed WarriorVisualizeBlend and WarriorShieldAttachment to work with other transform types [1.0.0] - 2025-07-31 Package released"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "manual/architecture.html": {
    "href": "manual/architecture.html",
    "title": "Architecture",
    "keywords": "Architecture In this section, we’ll cover the general architecture of the package. As the package is built with extensibility in mind, this will go into more technical detail about how the package functions to familiarize the user with key concepts. The package works with both traditional GameObjects (a.k.a. hybrid) and ECS subscenes using the same authoring components (e.g., MonoBehaviours). However, in both use cases, all logic runs in the ECS world, and the authoring components merely contain logic to set up entities. In the hybrid scenario, during MonoBehaviour setup, it also creates an Entity that gets connected with the GameObject's lifetime and adds components that are connected with the authoring component. For the subscene workflow, it follows general Unity concepts, so for more details, it is recommended to check Unity’s com.unity.entities package documentation about subscenes. The other sections will cover the authoring components, entity components, and systems. Keep in mind this only covers the core elements of the package for simplicity. The package contains more components, but they follow this structure quite strictly. Authoring Each animated object will contain at minimum the following structure. There is a parent GameObject that contains the Animatron component, which is the main component. It references the Rig ScriptableObject that is baked at edit time and contains the bone structure and animation data. Then it contains one or more child GameObjects, referred to as Skin, where each of them at the very least contains a RenderMeshArray. RenderMeshArray is a general-purpose rendering component that replaces the SkinnedMeshRenderer. It is a helpful analogy to think of the parent GameObject with Animatron as the bones of a body, and the Skin objects as the flesh that gets rendered—usually bound to a subset of bones or all of them. Note Note: RenderMeshArray can be used as a standalone component that essentially works as a MeshRenderer. There are multiple benefits to using it instead of Unity’s built-in MeshRenderer. For more details, read the section about RenderMeshArray. Entity Entities follow a structure similar to authoring, but with more granular components. There is a parent entity that contains several key components. The first is an optional Animatron, which simply plays an animation at a given index. Next, it contains a JointPose buffer, which is an array of transforms representing the entity’s pose at the current frame. It also has references to Armature and Motion. Armature and Motion are generated by the Rig. Armature is a compact binary blob that contains joint data, while Motion is another compact blob containing animation data. Similarly to authoring, there are one or more child entities. They reference the same Armature and also contain a SkinMatrix buffer, which is an array of transforms derived from a subset of the parent’s JointPose. There is also a singleton entity that contains the SkinMatrixBuffer component. This holds all SkinMatrix buffers from all entities, flattened into a single array and stored in GPU memory. It is later bound to shaders for deformation. Each entity also contains a SkinMatrixBufferIndex, which is simply an offset into this buffer and is regenerated each frame. Systems Most of the system logic runs in a system group called AnimatronSystemGroup. Here is a simplified execution order of systems and what they do: AnimatronSystemGroup contains systems: AnimatronSystem: Plays the current animation by writing transforms into JointPose. This is optional, and users can implement more advanced systems here—e.g., playing multiple animations on different joints or using a custom animation graph. Animation post-processing: This can be user-defined or, in this package’s case, includes blending (e.g., crossfade, inertialization, inverse kinematics, etc.). PoseSystem: Transforms the JointPose array from local space to object space. SkinSystem: Updates the SkinMatrix array from the parent’s JointPose and applies the bind pose transform, since this matrix will be used by the GPU. For more details, read the code or look up how skinning matrices are typically calculated. SkinMatrixSystem: This includes several systems that execute at different stages for performance reasons. Their main purpose is to flatten all SkinMatrix data from all entities into the singleton SkinMatrixBuffer in GPU memory. It also binds this GPU memory to the shader. After this, the Unity Entities Graphics package takes over, issuing draw calls for each RenderMeshArray. Since SkinMatrixBuffer contains all skin matrices in a single buffer, and each entity contains instance data like SkinMatrixBufferIndex, the shader can easily access the correct transforms. In theory, other rendering solutions can also be used, as long as they correctly gather all entities' SkinMatrixBufferIndex components and pass them to the GPU as instanced data."
  },
  "manual/authoring.html": {
    "href": "manual/authoring.html",
    "title": "Authoring",
    "keywords": "Authoring Authoring objects primarily serve as data containers used during the conversion process into entity-compatible data. For more details on each authoring component included in this package, refer to the child pages listed under this section."
  },
  "manual/authoring/animatron.html": {
    "href": "manual/authoring/animatron.html",
    "title": "Animatron",
    "keywords": "Animatron Animatron is the main component of the package responsible for animating an object. It inherits from EntityBehaviour, which means it will spawn an entity that shares its lifetime with the GameObject this component is attached to. The two most important properties are: Rig: Contains baked information about the object's armature and animation data. Skins: A list of renderers that will be deformed during animation playback."
  },
  "manual/authoring/cross-fader.html": {
    "href": "manual/authoring/cross-fader.html",
    "title": "Cross Fader",
    "keywords": "Cross Fader Cross Fader is a traditional technique for transitioning smoothly between two animations by blending them over a specified duration. Unlike inertialization, which adds physics-inspired interpolation, crossfade simply blends the weights of the current and next animations over time. When crossfading, both the current and the new animation are played simultaneously, and their contributions are linearly interpolated. As the transition progresses, the weight of the current animation decreases while the new animation's weight increases, resulting in a smooth visual blend. To use crossfade, simply call: Crossfade(float transitionTime) This starts blending from the current animation to the new one over the given transitionTime (in seconds). Note Note: In most cases, it is recommended to use inertialization instead of crossfade. Inertialization typically produces more natural motion and has better performance characteristics due to playing a single track at a time. Crossfade is still available if simultaneous blending of multiple tracks is required."
  },
  "manual/authoring/inertializer.html": {
    "href": "manual/authoring/inertializer.html",
    "title": "Inertializer",
    "keywords": "Inertializer Inertialization is a post-processing effect applied to animations to achieve smooth transitions between them. It serves as an alternative to traditional crossfading. Inertialization works by capturing each joint's linear and angular inertia during a transition. It immediately starts playing the new animation but applies an additional transformation to each joint. This transformation represents the delta between the previous animation pose and the starting pose of the new animation. Over the duration of the transition, this delta gradually resolves to the identity transform. For example, if the transition duration is 0.3 seconds: At time 0s, the full delta is applied. At time 0.3s, the delta becomes the identity transform. The interpolation is not linear—it follows the joint's previously calculated inertia for a more physically plausible result. This approach more closely mimics how humans transition between motions. When switching from one movement to another, humans do so instantly, but the momentum (inertia) from the previous motion still affects the body for a brief moment. For more information, see this GDC talk: Inertialization: High-Performance Animation Transitions Advantages Over Traditional Crossfade: Single Animation Track: Only one animation track is played at a time. This makes the system more consistent in frame timing. Smoother Transitions: Instead of blending multiple tracks (which can sometimes clash), the previous pose is eased out using retained accelerations, producing more natural movement. Dynamic Transition Timing: The user-specified transition time acts as a maximum. Each joint may finish transitioning at a different time depending on its inertia. If the new pose is already aligned with the direction of inertia, the transition completes even faster, resulting in more natural motion. Play To play an animation with inertialization, simply add the Inertializer component to the GameObject that contains the Animatron component, and call its function: Inertialize(float t)"
  },
  "manual/authoring/render-mesh-array.html": {
    "href": "manual/authoring/render-mesh-array.html",
    "title": "Render Mesh Array",
    "keywords": "Render Mesh Array RenderMeshArray is a component used for rendering meshes. It serves as an alternative to Unity’s existing components: MeshFilter, MeshRenderer, and SkinnedMeshRenderer. A GameObject with a RenderMeshArray component will render similarly to one using a MeshRenderer and MeshFilter. One major advantage of RenderMeshArray is its explicit control over sub-rendering. In Unity's MeshRenderer, sub-rendering is managed through the materials array—each material corresponds to a submesh index automatically. In contrast, RenderMeshArray allows you to manually specify which submesh index and even which mesh to use, offering much more flexibility and control. Performance In scenarios with heavy instancing (e.g. many objects sharing the same meshes, materials, filters, and submeshes), RenderMeshArray outperforms MeshRenderer in terms of CPU cost. Under the hood, it leverages EntityGraphics, which uses a more CPU-efficient method of building instance draw calls. This results in lower CPU overhead for culling and draw call recording. However, this also means it does not support rendering data typically precomputed per-renderer, such as: Light probes Per-object lighting data Forward additional lights To use those features, deferred or forward+ rendering paths are usually required. Deformations When a GameObject with a RenderMeshArray is a child of an Animatron GameObject with skinning enabled, it will behave similarly to Unity's SkinnedMeshRenderer."
  },
  "manual/authoring/rig.html": {
    "href": "manual/authoring/rig.html",
    "title": "Rig",
    "keywords": "Rig A Rig is a ScriptableObject that contains baked joint and animation data. This asset is shared across multiple instances of the same armature type. It primarily stores serialized binary data for the Armature and Motion structures. In this package, it is created by the RigImporter from assets with the .rig extension. Creation To create a Rig asset in the Project view, right-click to open the context menu, then select Create/Rig. It can also be created via the top menu by navigating to Assets/Create/Rig. This will generate an asset with the .rig extension."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Animatron",
    "keywords": "Animatron This package includes high performance, modular and scalable animation systems. It is developed with DOTS in mind. As result, it takes advantage of Unity's latest technology stack like SIMD mathematics, Jobs, Burst compiler, EntityComponentSystem and EntityGraphics. Additionally, there is hybrid mode support that enables using it with GameObjects in Object Oriented Programming. This lightweight animation system is designed with performance and flexibility at its core. Built to be easily extendable, it provides a solid foundation for developers who want full control over their animation pipeline. The system is modular by design—only the features you need are active, ensuring minimal overhead and no wasted resources. Whether you're building something simple or highly customized, this package offers the freedom to tailor it to your specific needs without paying the cost of unused functionality. This package is designed to work with both concepts DOD (Data oriented design) and OOP (Object oriented programming). Both share the same authoring components. Animatron vs Animator Animatron primarily, and most importantly, delivers significantly better performance compared to the Unity Animator. In certain cases, Animatron can have up to 8x lower CPU cost than Animator. However, it's important to understand that much of this performance gain comes from Animatron being designed with more targeted solutions, rather than attempting to solve every use case. Below are the key restrictions of Animatron that enable these optimizations: Animation Data Format: The Animator stores animation data in curves, which can include not only transformation data but also a wide variety of other properties like light intensity and more—typically features of the FBX format. As a result, Animator must resolve these curves at runtime and bind them to the appropriate properties, adding substantial overhead. In most games, this is unnecessary, as non-transform properties are usually not driven by animations. Animatron takes advantage of this by storing only transformation data, significantly reducing complexity and runtime cost. Bone Hierarchy Representation: In Unity, the imported FBX bone structure is represented as GameObjects. Therefore, the Animator must use GameObjects and their Transform components for animation, introducing all the associated overhead. Animatron, on the other hand, stores the bone hierarchy in a simple array and minimizes transformation calculations to the bare minimum, avoiding much of that overhead. You can still access bone transforms at runtime for things like attachments. Mesh Skinning Method: In Unity, mesh deformation (skinning) happens either on the CPU or in compute shaders, rather than in the vertex shader. Both approaches have their advantages and disadvantages. Unity chooses this method for shader simplicity, as handling skinning in the vertex shader would require supporting it across all shader variants, including custom user shaders. Another benefit is that in multi-pass shaders, skinning done once outside the vertex pipeline can reduce GPU cost. However, there are major downsides: Each skinned mesh instance requires a unique mesh, preventing the use of GPU instancing, which is highly efficient for reducing CPU load. CPU skinning is extremely expensive. Compute shader skinning is typically not optimal on tile-based GPUs (e.g., on mobile devices). For these reasons, Animatron performs skinning directly in the vertex shader, avoiding the downsides of compute or CPU-based skinning. Animatron vs Other DOTS Animation Solutions There are other excellent DOTS-based animation solutions on the Asset Store that serve their use cases well. Animatron focuses on the following points, and it's important for users to evaluate whether these align with their needs: Support for Hybrid Workflow: Designed for users who don't want to work directly with Entities. This approach follows the success of the Agents Navigation Package, offering a familiar workflow while still leveraging DOTS under the hood. Simple, Fast, Lightweight: Aims to provide a streamlined solution for playing animations without the bizarre overhead often found in more general-purpose systems. Scalable Foundation with Performance in Mind: Offers a highly customizable animation foundation with maximum performance in mind. Even in hybrid mode, the package uses Entities for the backend. Extending the system will require ECS knowledge—but your game logic does not need to be ECS-based. This design choice is intentional to ensure performance is not compromised. Seamless Unity Integration: Follows Unity's UI/UX best practices and integrates cleanly with the existing graphics and DOTS tech stack for a smooth development experience. Quick Start For minimal quick setup check tutorial Hello Animatron. Note Note: It's highly recommended to check out the Architecture page for a deeper understanding of how this package works internally. Dependencies Minimum Unity 2022.3 version Package com.unity.entities.graphics Support If you have questions, bugs or feature requests use Discord."
  },
  "manual/known-issues.html": {
    "href": "manual/known-issues.html",
    "title": "Known Issues",
    "keywords": "Known Issues Blend shapes are not supported. No out of the box graph solution. In URP you will need to use forward+ to support light probes. Note Note: This will be solved in the future releases."
  },
  "manual/samples.html": {
    "href": "manual/samples.html",
    "title": "Samples",
    "keywords": "Samples In a package folder named Samples you can find projects that showcase possible use cases. Samples in this package are contained in a hidden folder named Samples~ and they can be imported using Package Manager. This allows package to be lighter if samples are not used. To import samples, follow these steps: Click menu item Window/Package Manager to open package manager window. Make sure you selected tab Packages: In Project. Find package Animatron. Find button Samples and click it. Note Note: Make sure tab Packages: In Project is selected. For more information check https://docs.unity3d.com/2022.2/Documentation/Manual/cus-samples.html. TerracottaArmy Contains small isolated test scenes that showcases some common animation features and stress test."
  },
  "manual/settings.html": {
    "href": "manual/settings.html",
    "title": "Settings",
    "keywords": "Settings Settings for this package can be found in the Project Settings window under the Animatron tab. Rig Transform Type The Rig Transform Type setting allows you to choose the specific transform structure used by Animatron. There are several predefined types, each with its own advantages and disadvantages, giving users greater control based on their needs. For example, in many cases, users do not need scale for skinning. By selecting a transform type that excludes scale, you can save both memory and improve performance. Note Note: Imported Rig assets are generated using the transform type specified in the settings. If the transform type is changed in the settings, you will need to re-import all Rig assets."
  },
  "manual/tutorials.html": {
    "href": "manual/tutorials.html",
    "title": "Tutorials",
    "keywords": "Tutorials This sections will contain some common tutorial requested by the users."
  },
  "manual/tutorials/attachments.html": {
    "href": "manual/tutorials/attachments.html",
    "title": "Attachments",
    "keywords": "Attachments TODO This page will be completed in the future. For now, check the WarriorShieldAttachment scene in the TerracottaArmy sample."
  },
  "manual/tutorials/custom-player.html": {
    "href": "manual/tutorials/custom-player.html",
    "title": "Custom Player",
    "keywords": "Custom Player TODO This page will be completed in the future. For now, check the WarriorRetroAnimatron scene in the TerracottaArmy sample."
  },
  "manual/tutorials/custom-skinning-shader.html": {
    "href": "manual/tutorials/custom-skinning-shader.html",
    "title": "Custom Skinning Shader",
    "keywords": "Custom Skinning Shader This tutorial will guide you through creating a custom shader that supports Animatron deformations using Shader Graph. Shader Graph 1. Create a New Shader Graph Animatron relies on the Shader Graph package, so you'll need to create a new shader using Shader Graph. Right-click in the Project view and select: Create > Shader Graph > ... Choose the appropriate option based on your render pipeline (URP, HDRP, etc.) and surface type (Lit, Unlit, etc.). 2. Add the \"Animatron Linear Blend Skinning\" Node Open the newly created shader graph. In the graph window, right-click and choose: Add Node > Animatron Linear Blend Skinning Connect the Skinned Position, Normal, and Tangent outputs of the node to the corresponding Vertex Block inputs. Save the graph. Skinning Mode The Animatron Linear Blend Skinning node has a SkinningMode option with the following settings: FourJoint: Use this mode if all meshes using the shader have exactly 4 blend weights per vertex. This mode offers the best performance since the shader avoids dynamic branching. You can enforce this during rig import by enabling the Force 4 Blend Weights option. Dynamic: Use this mode if your meshes have a variable number of blend weights. It offers flexibility at the cost of some performance. Custom Shader For those who do not want to use Shader Graph, there is a shader include file that contains the skinning function and can be imported into your shader. 1. Include \"Animatron Linear Blend Skinning\" file in your shader In your shader, add the following include file: Packages/com.projectdawn.animatron/Shaders/AnimatronLinearBlendSkinning.hlsl 2. Add function call Call one of the skinning functions in the vertex shader: Animatron_LinearBlendSkinning_float or Animatron_LinearBlendSkinning_dynamic_float, depending on your setup. Check the Skinning Mode section for details. 3. Add instanced properties Each render call must include the following property: float _SkinMatrixIndex; This is used to determine where the skinning matrices begin in _AnimatronSkinMatrices."
  },
  "manual/tutorials/hello-animatron.html": {
    "href": "manual/tutorials/hello-animatron.html",
    "title": "Hello Animatron",
    "keywords": "Hello Animatron This tutorial will guide you through the process of creating an animated object from a prefab using Animatron. 1. Select a Prefab Start by selecting the prefab you want to create a rig from. Typically, this will be an imported model asset such as .fbx, .gltf, or .glb. 2. Create a Rig Asset With the asset selected in the Project view, right-click and choose: Create > Rig This will generate a new asset with the .rig extension. Note Note: The .rig file is a dummy asset. The actual data is handled by the RigImporter, a ScriptedImporter that generates the underlying Rig ScriptableObject. 3. Assign the Prefab Select the newly created .rig asset and assign your original prefab to the Prefab field. Once assigned, a Rig ScriptableObject will be generated automatically. 4. Add Animations In the Inspector, you’ll see an array labeled Animations. Here you can assign the animation clips you want baked into the rig. Note Note: The assigned animations must share the same joint structure as the prefab. Mismatches can lead to undefined results. After adding the animations, make sure to click the Apply button to save your changes. 5. Drag Into the Scene Just like any prefab, you can now drag and drop the .rig asset into the Scene view to create an instance."
  },
  "manual/tutorials/material-properties.html": {
    "href": "manual/tutorials/material-properties.html",
    "title": "Material Properties",
    "keywords": "Material Properties TODO This page will be completed in the future. For now, check the MageTeamSwitcher scene in the TerracottaArmy sample."
  }
}